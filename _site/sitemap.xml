<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>달상자 Blog</title>
    <description>공부하려고 만든 블로그</description>
    <link>https://hanscom95.github.io/</link>
    <atom:link href="https://hanscom95.github.io/sitemap.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 21 Jun 2022 10:52:12 +0900</pubDate>
    <lastBuildDate>Tue, 21 Jun 2022 10:52:12 +0900</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>Docker &amp; Nexus3 Registry 설치 가이드</title>
        <description>&lt;h1 id=&quot;private-docker-registry-설치-가이드&quot;&gt;Private Docker Registry 설치 가이드&lt;/h1&gt;

&lt;p&gt;개인 도커 repository가 필요해서 GUI 환경을 제공하는 오픈소스 기반 Nexus 설치 가이드 작성&lt;/p&gt;

&lt;h2 id=&quot;데모-환경&quot;&gt;데모 환경&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Ubuntu 20.10&lt;/li&gt;
  &lt;li&gt;Docker version 20.10.8
    &lt;ul&gt;
      &lt;li&gt;최소 1.8이상 필요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Nexus 3.39.0-01&lt;/li&gt;
  &lt;li&gt;MAC OS 12.4&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ubuntu-서버-작업&quot;&gt;ubuntu 서버 작업&lt;/h2&gt;
&lt;h3 id=&quot;1-docker-volume-생성&quot;&gt;1. docker volume 생성&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker volume create nexus 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;주의 사항 - mount된 hdd 디렉토리를 container volume 호스트 디렉토리와 연결시 container down&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-docker-contianer-생성외부-포트-4000-5000-번-연결&quot;&gt;2. docker contianer 생성(외부 포트 4000, 5000 번 연결)&lt;/h3&gt;
&lt;p&gt;4000번은 GUI환경 웹페이지, 5000번은 docker registry&lt;br /&gt;
memory : 3g&lt;br /&gt;
memory swap : 3g&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -p 5000:5000 -p 4000:8081 --memory-swap 3g --memory 3g --name nexus -v nexus:/nexus-data -u root sonatype/nexus3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;실행시간이 좀 걸림, 대략 1분?&lt;/p&gt;

&lt;h3 id=&quot;3-nexus-웹-접속-http서버ip4000&quot;&gt;3. nexus 웹 접속 http://서버ip:4000&lt;/h3&gt;
&lt;p&gt;admin 계정 로그인 패스워드는 container안에 /nexus-data/admin.password 확인&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker exec -it nexus cat /nexus-data/admin.password
1d671scx-3e78-1s2d-4455-2607d2aj186t
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-nexus-blob-stores의-hosted-proxy-생성&quot;&gt;4. Nexus Blob Stores의 hosted, proxy 생성&lt;/h3&gt;
&lt;p&gt;Administration &amp;gt; Repository &amp;gt; Blob Stores &amp;gt; Create blob store&lt;br /&gt;
  공통 type : File&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;name : docker-proxy&lt;/li&gt;
  &lt;li&gt;name : docker-hosted&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/docker-nexus-repository_1.png&quot; alt=&quot;create blob&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;5-nexus-repositories의-hosted-proxy-저장소-생성&quot;&gt;5. Nexus Repositories의 hosted, proxy 저장소 생성&lt;/h3&gt;
&lt;p&gt;Administration &amp;gt; Repository &amp;gt; Repositories &amp;gt; Create repository&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;docker(hosted)&lt;br /&gt;
name : docker-hosted&lt;br /&gt;
http : 5000&lt;br /&gt;
Enable Docker V1 API : true&lt;br /&gt;
Storage &amp;gt; Blob store : docker-hosted 선택&lt;/li&gt;
  &lt;li&gt;docker(proxy)&lt;br /&gt;
name : docker-hub&lt;br /&gt;
Enable Docker V1 API : true
Proxy &amp;gt; Remote storage : https://registry-1.docker.io 입력&lt;br /&gt;
Docker index : Use Docker Hub&lt;br /&gt;
Storage &amp;gt; Blob store : docker-hub 선택&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/docker-nexus-repository_2.png&quot; alt=&quot;create repositories1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/docker-nexus-repository_3.png&quot; alt=&quot;create repositories2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/docker-nexus-repository_4.png&quot; alt=&quot;create repositories3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/docker-nexus-repository_5.png&quot; alt=&quot;create repositories4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/docker-nexus-repository_6.png&quot; alt=&quot;create repositories5&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-nexus-realms-설정&quot;&gt;6. Nexus Realms 설정&lt;/h3&gt;
&lt;p&gt;Administration &amp;gt; Security &amp;gt; Realms&lt;br /&gt;
&lt;strong&gt;Docker Bearer Token Realm&lt;/strong&gt; Active로 이동 후 Save
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/docker-nexus-repository_7.png&quot; alt=&quot;Nexus Realms&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-docker-명령어-http-사용-설정서버-ip-입력&quot;&gt;7. docker 명령어 http 사용 설정(서버 ip 입력)&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vi  /etc/docker/daemon.json
{
        &quot;insecure-registries&quot; : [&quot;서버ip:5000&quot;]
}

$ service docker restart
$ docker restart nexus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;8-외부에서-접속할-pc와-서버-docker-저장소-연결mac-os-기준&quot;&gt;8. 외부에서 접속할 pc와 서버 docker 저장소 연결(mac os 기준)&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vi /Users/[사용자이름]/.docker/daemon.json
{
        &quot;insecure-registries&quot; : [&quot;서버ip:5000&quot;]
}

$ service docker restart
$ docker login 서버ip:5000
Username: admin
Password: ***

WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;9-서버-저장소에-push&quot;&gt;9. 서버 저장소에 push&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker tag myweb:1.0 서버ip:5000/myweb:1.0

$ docker push 서버ip:5000/mynode:1.0
The push refers to repository [서버ip:5000/myweb]
a5166b120798: Pushed 
8a725e53d751: Pushed 
b991c80c3ef2: Pushed 
8df6b63c60d4: Pushed 
d63b53686463: Pushed 
c0b09410617a: Pushed 
be9057e6dae4: Pushed 
4fc242d58285: Pushed 
1.0: digest: sha256:3ca3522ee4817d3656d7a1bcf4adce3fa8f926e8bb6c5f1ea7ccf6758cc5a88e size: 1984
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;10-서버-저장소-push-image-확인&quot;&gt;10. 서버 저장소 push image 확인&lt;/h3&gt;
&lt;p&gt;Browse &amp;gt; Browse &amp;gt; docker-hosted &amp;gt; v2 &amp;gt; myweb &amp;gt; tags &amp;gt; 1.0
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/docker-nexus-repository_8.png&quot; alt=&quot;create repositories1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;11-외부에서-접속할-pc에서-서버-저장소에서-pull&quot;&gt;11. 외부에서 접속할 pc에서 서버 저장소에서 pull&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker pull 서버ip:5000/mynode:1.0
1.0: Pulling from myweb
df9b9388f04a: Pull complete 
5867cba5fcbd: Pull complete 
4b639e65cb3b: Pull complete 
061ed9e2b976: Pull complete 
bc19f3e8eeb1: Pull complete 
4071be97c256: Pull complete 
3faab898a72f: Pull complete 
0404bdb46d0c: Pull complete 
Digest: sha256:3ca3522ee4817d3656d7a1bcf4adce3fa8f926e8bb6c5f1ea7ccf6758cc5a88e
Status: Downloaded newer image for 서버ip:5000/myweb:1.0
서버ip:5000/myweb:1.0

$ docker images
REPOSITORY                  TAG       IMAGE ID       CREATED        SIZE
서버ip:5000/myweb            1.0       cc63874a7854   5 weeks ago    23.4MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;12-docker-stop-명령어databases-to-fully-shut-down&quot;&gt;12. docker stop 명령어(databases to fully shut down)&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker stop --time=120 nexus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 20 Jun 2022 20:00:00 +0900</pubDate>
        <link>https://hanscom95.github.io/all/docker/ubuntu/2022/06/20/docker-nexus-repository.html</link>
        <guid isPermaLink="true">https://hanscom95.github.io/all/docker/ubuntu/2022/06/20/docker-nexus-repository.html</guid>
        
        
        <category>all</category>
        
        <category>docker</category>
        
        <category>ubuntu</category>
        
      </item>
    
      <item>
        <title>마스터링 비트코인 ch10</title>
        <description>&lt;h1 id=&quot;마스터링-비트코인-ch10-채굴과-합의&quot;&gt;마스터링 비트코인 ch10 채굴과 합의&lt;/h1&gt;

&lt;h2 id=&quot;1-서론&quot;&gt;1. 서론&lt;/h2&gt;
&lt;h3 id=&quot;채굴&quot;&gt;채굴&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;분산화된 클리어링하우스의 주요 프로세스로 거래를 검증하고 승인
    &lt;ul&gt;
      &lt;li&gt;클리어링하우스
금융 시장에서 구매자와 판매자 사이에 지정된 중개자로서 거래를 확인하고 완료하여 구매자와 판매자 모두 계약상의 의무를 준수하도록 한다.
(http://fnwiki.org/clearing-house/)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비트코인 시스템을 안전하게 보호하고 전 네트워크에 걸쳐 중앙 권력 없이 합의를 이룰 수 있도록 해 줌&lt;/li&gt;
  &lt;li&gt;새로운 비트코인을 생성하는 것이 아니라 인센티브 시스템일 뿐임&lt;/li&gt;
  &lt;li&gt;비트코인으 보안이 분산화 되도록 하는 매커니즘
    &lt;h3 id=&quot;보상&quot;&gt;보상&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;새 블록 각각에서 새로운 코인을 생성&lt;/li&gt;
  &lt;li&gt;해당 블록 내에 들어 있는 거래 전부로부터 거래 수수료를 받음
    &lt;h3 id=&quot;작업증명&quot;&gt;작업증명&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;암호화 해시를 기반으로 하는 어려운 수학 문제를 풀기 위해 경쟁&lt;/li&gt;
  &lt;li&gt;수학 문제에 대한 해답을 작업증명이라고 함&lt;/li&gt;
  &lt;li&gt;비트코인 보안 모델의 근간
    &lt;h3 id=&quot;신규-비트코인-공급-반감기&quot;&gt;신규 비트코인 공급 반감기&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;약 4년마다, 210,000 블록&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;채굴-노드&quot;&gt;채굴 노드&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;비트코인 네트워크 상에서 몇몇 노드들은 채굴자라고 불리는 특수 노드들&lt;/li&gt;
  &lt;li&gt;몇몇 채굴자들은 풀 노드 없이 채굴 작업을 하기도 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-블록에-거래-추가하기&quot;&gt;2. 블록에 거래 추가하기&lt;/h2&gt;

&lt;h2 id=&quot;3-블록-식별자---블록-헤더-해시와-블록-높이&quot;&gt;3. 블록 식별자 - 블록 헤더 해시와 블록 높이&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;블록의 디지탈 지문 역할을 하는 암호화 해시(Block Header Hash)
    &lt;ul&gt;
      &lt;li&gt;SHA256 알고리즘을 통해 블록 헤더를 2회 해싱해서 얻어지는 결과값&lt;/li&gt;
      &lt;li&gt;유일하고 확실한 방법으로 해당 블록을 식별하며 모든 노드는 블록 헤더를 간단히 해싱함으로써 독립적으로 블록 해시값을 얻을 수 있음&lt;/li&gt;
      &lt;li&gt;블록 해시는 실제로 블록의 데이터 구조에 포함되어 있지 않음. 대신 해당 블록을 네트워크에서 전송받으면서 각 노드에 의해 계산됨. 블록의 메타데이터의 일부로 별도의 데이터베이스 테이블 내에 저장될 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;블록체인 네트워크의 전체기록에서 확인된 블록의 수(Block Height)
    &lt;ul&gt;
      &lt;li&gt;제네시스 블록에서 가장 최근 블록까지의 높이(제네시스 블록 높이 0, 채굴된 첫 번째 블록 높이 1)&lt;/li&gt;
      &lt;li&gt;블록해시와 달리 블록 높이는 특유의 식별자는 아님
        &lt;ul&gt;
          &lt;li&gt;2개 이상의 블록들이 블록체인 내에서 동일한 위치를 점하기 위해 경쟁하면서 동일한 블록 높이 가질 경우 발생
 &lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch9_2.png&quot; alt=&quot;그림2&quot; /&gt;&lt;br /&gt;
 그림2 2022년 05월 24일 최근 블록 높이&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-최초블록&quot;&gt;4 최초블록&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;비트코인 제네시스 블록
    &lt;ul&gt;
      &lt;li&gt;2009.01.04 03:15:05에 사토시 나카모토가 생성한 첫번째 블록, 블록 높이: 0&lt;/li&gt;
      &lt;li&gt;제네시스 블록 주소: https://btc.com/btc/transaction/4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b&lt;/li&gt;
      &lt;li&gt;비트코인 제네시스 블록에 기록된 메시지: “더 타임스 2009.1.3 은행의 두번째 구제 금융을 앞둔 재무장관”
        &lt;ul&gt;
          &lt;li&gt;2008년 글로벌 금융위기 이후 중앙기관에 대한 신뢰성 문제가 대두되면서 비트코인 프로젝트를 시작한 동기로 추정&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;최초블록은 비트코인 클라이언트 소프트웨어 내에서 고정적으로 인코딩되어 있기 때문에 모든 노드는 적어도 하나의 블록으로 구성된 블록체인으로 시작하며, 최초블록은 변경 불가.&lt;/li&gt;
      &lt;li&gt;모든 노드는 최초블록의 해시와 구조, 최초 블록의 생성 시간, 최초블록 내의 단일 거래까지도 항상 알고 있음. 따라서 모든 노드는 블록체인을 생성하는 데 있어 시작점을 가지고 있다고 볼 수 있으며, 최초블록은 신뢰받는 블록체인을 만드는 기반이 되는 안전한 루트&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-블록체인에-블록-연결하기&quot;&gt;5 블록체인에 블록 연결하기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;노드가 네트워크로부터 새로 생성되는 블록을 수신&lt;/li&gt;
  &lt;li&gt;노드는 수신된 블록의 유효성을 검증하고, 기존 블록체인에 검증을 통과한 블록을 연결  &lt;br /&gt;
(링크를 설정하기 위해서, 노드는 들어오는 블록의 헤더를 검사하고 이전 블록 해시를 확인)&lt;/li&gt;
  &lt;li&gt;블록 #1이 생성된 상태에서 블록#2가 네트워크를 통해 수신되면, 노드는 블록#2의 헤더에서 이전 블록의 해시 확인. 더 이전의 블록 해시는 이전 블록인 블록#1의 블록헤더 해시와 동일해야 함. 이렇게 자신이 child(블록#2)가 되고, 이것과 연결된 parent 블록을 찾으면, 생성된 블록을 이용하여 블록체인을 연장&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-머클-트리&quot;&gt;6 머클 트리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;개요
    &lt;ul&gt;
      &lt;li&gt;블록 내에서 다수의 원장(ledger)들을 암호화하고 합치는 과정을 반복하여 최종적으로 하나의 유닛(Unit)으로 암호화하는 방법&lt;/li&gt;
      &lt;li&gt;머클트리의 형태는 블록이 보유하고 있는 거래 내역들의 해시값을 가장 가까운 거래내역끼리 쌍을 지어 해시화하고, 쌍을 지을 수 없을 때까지 해당 과정을 반복하여 완성되는데, 이 과정을 통해 다수의 데이터를 하나로 묶어 용량을 절약&lt;/li&gt;
      &lt;li&gt;모든 거래내역들을 해시화한 머클루트를 통해 거래내역의 변동여부를 쉽게 확인할 수 있고 이 머클루트를 헤더에 담아 트랜잭션의 유효성을 보장. 즉, 머클트리는 모든 정보를 압축하여 간단하게 표현한 데이터로서 머클트리를 통해 데이터의 간편하고 확실한 인증이 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;생성 과정
    &lt;ul&gt;
      &lt;li&gt;최초 데이터를 SHA256형태의 해시값으로 변환&lt;/li&gt;
      &lt;li&gt;가장 가까운 노드 2개를 한쌍으로 묶어 합친 후 그 값을 해시값으로 변환&lt;/li&gt;
      &lt;li&gt;하나가 남을 때까지 2번 과정을 계속 반복되며 하나의 값만 남았을 때까지 이 과정을 반복&lt;/li&gt;
      &lt;li&gt;최종적으로 남는 하나의 블록은 모든 거래를 합친 해시값을 포함하고 있으며 이를 머클루트(Merkle Root)라고 함&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch9_3.png&quot; alt=&quot;그림3&quot; /&gt;&lt;br /&gt;
그림3 머클 트리 노드 계산&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;특정 거래내역을 증명하기 위해 모든 거래내역을 검색할 필요 없음. 블록체인은 시간이 지날수록 블록체인에 저장된 데이터가 늘어나 용량이 커지고 거래 처리 속도도 느려질 수밖에 없으며, 따라서 모든 거래 내역을 저장하고 있는 풀노드(full node)와 데이터 일부만을 처리해 보관하는 라이트 노드(light node)를 분리해 거래 처리 속도를 높이는 방법을 선택하는 블록체인도 있음. &lt;br /&gt;
머클트리의 머클루트가 바로 이 라이트 노드와 같은 역할을 해주며, 머클루트값만 알면 최소한의 정보만으로도 필요한 정보를 블록에서 가져올 수 있음. 블록체인 네트워크 용량 중 큰 부분을 차지하고 있는 
거래내역을 조회하지 않고 32바이트에 불과한 값 하나로 거래내역 검증을 간편하고 확실하게 할 수 있기 때문에 사양이 낮은 기기들의 네트워크 접근성이 높아지는 동시에 탈중앙화를 통한 네트워크 안정성이 향상&lt;/li&gt;
      &lt;li&gt;모든 거래내역들이 합하여 해시화된 값이 머클루트이기 때문에 하나의 거래내역에 작은 변화가 생기더라도 상위 해시값 모두가 변하게 됨. 따라서 특정 거래 내역을 확인하기 위해 모든 거래내역을 일일이 검사해야 하는 번거로움을 줄일 수 있음.   &lt;br /&gt;
또한 거래내역을 위변조하려는 잘못된 해시값이 검출되는 경우 네트워크 접속을 거부할 수 있으며, 이는 기존 거래 내역 일부에 작은 변화가 있기만 해도 상위 해시값이 모두 변환되기 때문임. 네트워크의 접근성은 높아졌지만 동시에 보안성도 높아지는 일석이조의 효과&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;7-머클-트리와-단순지불검증spv&quot;&gt;7 머클 트리와 단순지불검증(SPV)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;SPV 노드는 전체 블록을 다운로드하지 않고, 블록헤더만 다운로드 하기 때문에 전체블록 대비 1,000분의 1정도의 작은 용량만 차지함 따라서, 제한적인 성능의 디바이스나 스마트폰과 같은 환경에서 거래를 하기 위한 용도로 사용&lt;/li&gt;
  &lt;li&gt;거래정보가 없이 블록헤더만을 가지고 있기 때문에 거래를 위해 블록체인 상의 블록 높이 대신 깊이를 참조해서 거래를 검증함. 블록의 헤더에는 거래의 해시정보가 포함된 머클트리 루트가 포함되어 있음.&lt;/li&gt;
  &lt;li&gt;아래 그림은 사토시 나카모토의 비트코인 논문에 포함된 머클루트. 각 블록에 포함된 머클루트의 정보를 통해 특정 거래의 존재여부를 확인할 수 있으며, 거래존재가 확인된 블록 이후로 6개의 블록이 쌓인 경우, 해당거래는 유효하다고 판단되어 거래에 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-정리&quot;&gt;6 정리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;블록체인은 분산원장 기술이라고 불림&lt;/li&gt;
  &lt;li&gt;원본 데이터를 알아볼 수 없도록 해시함수를 사용(위/변조 방지)&lt;/li&gt;
  &lt;li&gt;저장소 크기를 줄이기 위해 머클 트리(Merkle tree)가 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-참고문서&quot;&gt;○ 참고문서&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch09.asciidoc&quot;&gt;bitcoinbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 31 May 2022 15:00:00 +0900</pubDate>
        <link>https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/05/31/bitcoinbook_ch10.html</link>
        <guid isPermaLink="true">https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/05/31/bitcoinbook_ch10.html</guid>
        
        
        <category>all</category>
        
        <category>bitcoin</category>
        
        <category>마스터링 비트코인</category>
        
      </item>
    
      <item>
        <title>마스터링 비트코인 ch9</title>
        <description>&lt;h1 id=&quot;마스터링-비트코인-ch9-블록체인&quot;&gt;마스터링 비트코인 ch9 블록체인&lt;/h1&gt;

&lt;h2 id=&quot;1-서론&quot;&gt;1. 서론&lt;/h2&gt;
&lt;p&gt;블록체인 이란 블록으로 이루어진 링크드 리스트&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;비트코인 블록체인은 블록이 뒤로 링크되어 체인의 이전 블록을 각각 참조한다(역 링크 목록)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-블록-구조&quot;&gt;2. 블록 구조&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;블록: 공개 장부인 블록체인에 거래들을 포함시키기 위해 합쳐 놓은 컨테이너 데이터 구조
    &lt;ul&gt;
      &lt;li&gt;Header와 Body(거래목록)로 구성&lt;/li&gt;
      &lt;li&gt;1개의 블록에는 평균 500개 이상의 거래가 담겨지며, 모든 거래가 포함된 후 완성된 블록은 블록 헤더의 크기보다 1,000배 정도 큼&lt;/li&gt;
      &lt;li&gt;2022.05.24 기준 풀노드 블록 크기: 407.63GB&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch9_1.png&quot; alt=&quot;그림1&quot; /&gt;&lt;br /&gt;
그림1 블록 구조&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;블록 헤더
    &lt;ul&gt;
      &lt;li&gt;블록 헤더는 블록 메타데이터의 3가지 집합으로 구성&lt;/li&gt;
      &lt;li&gt;이전 블록 해시값&lt;/li&gt;
      &lt;li&gt;난이도, 타임스탬프, 논스(채굴 경쟁과 연관)&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;머클 트리 루트&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;버전 : 소프트웨어/프로토콜 업그레이드 추적을 위한 버전 번호&lt;/li&gt;
          &lt;li&gt;이전 블록 해시 : 체인 내 이전 블록(부모)의 해시에 대한 참조값&lt;/li&gt;
          &lt;li&gt;머클 루트 : 해당 블록에 포함된 거래로부터 생성된 머클 트리의 루트에 대한 해시&lt;/li&gt;
          &lt;li&gt;타임스탬프 : 블록의 대략적인 생성 시간(유닉스 기준일부터 초단위로 계산)&lt;/li&gt;
          &lt;li&gt;난이도 목표(bits) : 블록의 작업증명 알고리즘에 대한 난이도 목표&lt;/li&gt;
          &lt;li&gt;논스(nonce) : 작업증명(Proof of Work) 알고리즘에 사용되는 카운터 역할&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-블록-식별자---블록-헤더-해시와-블록-높이&quot;&gt;3. 블록 식별자 - 블록 헤더 해시와 블록 높이&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;블록의 디지탈 지문 역할을 하는 암호화 해시(Block Header Hash)
    &lt;ul&gt;
      &lt;li&gt;SHA256 알고리즘을 통해 블록 헤더를 2회 해싱해서 얻어지는 결과값&lt;/li&gt;
      &lt;li&gt;유일하고 확실한 방법으로 해당 블록을 식별하며 모든 노드는 블록 헤더를 간단히 해싱함으로써 독립적으로 블록 해시값을 얻을 수 있음&lt;/li&gt;
      &lt;li&gt;블록 해시는 실제로 블록의 데이터 구조에 포함되어 있지 않음. 대신 해당 블록을 네트워크에서 전송받으면서 각 노드에 의해 계산됨. 블록의 메타데이터의 일부로 별도의 데이터베이스 테이블 내에 저장될 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;블록체인 네트워크의 전체기록에서 확인된 블록의 수(Block Height)
    &lt;ul&gt;
      &lt;li&gt;제네시스 블록에서 가장 최근 블록까지의 높이(제네시스 블록 높이 0, 채굴된 첫 번째 블록 높이 1)&lt;/li&gt;
      &lt;li&gt;블록해시와 달리 블록 높이는 특유의 식별자는 아님
        &lt;ul&gt;
          &lt;li&gt;2개 이상의 블록들이 블록체인 내에서 동일한 위치를 점하기 위해 경쟁하면서 동일한 블록 높이 가질 경우 발생
 &lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch9_2.png&quot; alt=&quot;그림2&quot; /&gt;&lt;br /&gt;
 그림2 2022년 05월 24일 최근 블록 높이&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-최초블록&quot;&gt;4 최초블록&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;비트코인 제네시스 블록
    &lt;ul&gt;
      &lt;li&gt;2009.01.04 03:15:05에 사토시 나카모토가 생성한 첫번째 블록, 블록 높이: 0&lt;/li&gt;
      &lt;li&gt;제네시스 블록 주소: https://btc.com/btc/transaction/4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b&lt;/li&gt;
      &lt;li&gt;비트코인 제네시스 블록에 기록된 메시지: “더 타임스 2009.1.3 은행의 두번째 구제 금융을 앞둔 재무장관”
        &lt;ul&gt;
          &lt;li&gt;2008년 글로벌 금융위기 이후 중앙기관에 대한 신뢰성 문제가 대두되면서 비트코인 프로젝트를 시작한 동기로 추정&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;최초블록은 비트코인 클라이언트 소프트웨어 내에서 고정적으로 인코딩되어 있기 때문에 모든 노드는 적어도 하나의 블록으로 구성된 블록체인으로 시작하며, 최초블록은 변경 불가.&lt;/li&gt;
      &lt;li&gt;모든 노드는 최초블록의 해시와 구조, 최초 블록의 생성 시간, 최초블록 내의 단일 거래까지도 항상 알고 있음. 따라서 모든 노드는 블록체인을 생성하는 데 있어 시작점을 가지고 있다고 볼 수 있으며, 최초블록은 신뢰받는 블록체인을 만드는 기반이 되는 안전한 루트&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-블록체인에-블록-연결하기&quot;&gt;5 블록체인에 블록 연결하기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;노드가 네트워크로부터 새로 생성되는 블록을 수신&lt;/li&gt;
  &lt;li&gt;노드는 수신된 블록의 유효성을 검증하고, 기존 블록체인에 검증을 통과한 블록을 연결  &lt;br /&gt;
(링크를 설정하기 위해서, 노드는 들어오는 블록의 헤더를 검사하고 이전 블록 해시를 확인)&lt;/li&gt;
  &lt;li&gt;블록 #1이 생성된 상태에서 블록#2가 네트워크를 통해 수신되면, 노드는 블록#2의 헤더에서 이전 블록의 해시 확인. 더 이전의 블록 해시는 이전 블록인 블록#1의 블록헤더 해시와 동일해야 함. 이렇게 자신이 child(블록#2)가 되고, 이것과 연결된 parent 블록을 찾으면, 생성된 블록을 이용하여 블록체인을 연장&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-머클-트리&quot;&gt;6 머클 트리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;개요
    &lt;ul&gt;
      &lt;li&gt;블록 내에서 다수의 원장(ledger)들을 암호화하고 합치는 과정을 반복하여 최종적으로 하나의 유닛(Unit)으로 암호화하는 방법&lt;/li&gt;
      &lt;li&gt;머클트리의 형태는 블록이 보유하고 있는 거래 내역들의 해시값을 가장 가까운 거래내역끼리 쌍을 지어 해시화하고, 쌍을 지을 수 없을 때까지 해당 과정을 반복하여 완성되는데, 이 과정을 통해 다수의 데이터를 하나로 묶어 용량을 절약&lt;/li&gt;
      &lt;li&gt;모든 거래내역들을 해시화한 머클루트를 통해 거래내역의 변동여부를 쉽게 확인할 수 있고 이 머클루트를 헤더에 담아 트랜잭션의 유효성을 보장. 즉, 머클트리는 모든 정보를 압축하여 간단하게 표현한 데이터로서 머클트리를 통해 데이터의 간편하고 확실한 인증이 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;생성 과정
    &lt;ul&gt;
      &lt;li&gt;최초 데이터를 SHA256형태의 해시값으로 변환&lt;/li&gt;
      &lt;li&gt;가장 가까운 노드 2개를 한쌍으로 묶어 합친 후 그 값을 해시값으로 변환&lt;/li&gt;
      &lt;li&gt;하나가 남을 때까지 2번 과정을 계속 반복되며 하나의 값만 남았을 때까지 이 과정을 반복&lt;/li&gt;
      &lt;li&gt;최종적으로 남는 하나의 블록은 모든 거래를 합친 해시값을 포함하고 있으며 이를 머클루트(Merkle Root)라고 함&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch9_3.png&quot; alt=&quot;그림3&quot; /&gt;&lt;br /&gt;
그림3 머클 트리 노드 계산&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;특정 거래내역을 증명하기 위해 모든 거래내역을 검색할 필요 없음. 블록체인은 시간이 지날수록 블록체인에 저장된 데이터가 늘어나 용량이 커지고 거래 처리 속도도 느려질 수밖에 없으며, 따라서 모든 거래 내역을 저장하고 있는 풀노드(full node)와 데이터 일부만을 처리해 보관하는 라이트 노드(light node)를 분리해 거래 처리 속도를 높이는 방법을 선택하는 블록체인도 있음. &lt;br /&gt;
머클트리의 머클루트가 바로 이 라이트 노드와 같은 역할을 해주며, 머클루트값만 알면 최소한의 정보만으로도 필요한 정보를 블록에서 가져올 수 있음. 블록체인 네트워크 용량 중 큰 부분을 차지하고 있는 
거래내역을 조회하지 않고 32바이트에 불과한 값 하나로 거래내역 검증을 간편하고 확실하게 할 수 있기 때문에 사양이 낮은 기기들의 네트워크 접근성이 높아지는 동시에 탈중앙화를 통한 네트워크 안정성이 향상&lt;/li&gt;
      &lt;li&gt;모든 거래내역들이 합하여 해시화된 값이 머클루트이기 때문에 하나의 거래내역에 작은 변화가 생기더라도 상위 해시값 모두가 변하게 됨. 따라서 특정 거래 내역을 확인하기 위해 모든 거래내역을 일일이 검사해야 하는 번거로움을 줄일 수 있음.   &lt;br /&gt;
또한 거래내역을 위변조하려는 잘못된 해시값이 검출되는 경우 네트워크 접속을 거부할 수 있으며, 이는 기존 거래 내역 일부에 작은 변화가 있기만 해도 상위 해시값이 모두 변환되기 때문임. 네트워크의 접근성은 높아졌지만 동시에 보안성도 높아지는 일석이조의 효과&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;7-머클-트리와-단순지불검증spv&quot;&gt;7 머클 트리와 단순지불검증(SPV)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;SPV 노드는 전체 블록을 다운로드하지 않고, 블록헤더만 다운로드 하기 때문에 전체블록 대비 1,000분의 1정도의 작은 용량만 차지함 따라서, 제한적인 성능의 디바이스나 스마트폰과 같은 환경에서 거래를 하기 위한 용도로 사용&lt;/li&gt;
  &lt;li&gt;거래정보가 없이 블록헤더만을 가지고 있기 때문에 거래를 위해 블록체인 상의 블록 높이 대신 깊이를 참조해서 거래를 검증함. 블록의 헤더에는 거래의 해시정보가 포함된 머클트리 루트가 포함되어 있음.&lt;/li&gt;
  &lt;li&gt;아래 그림은 사토시 나카모토의 비트코인 논문에 포함된 머클루트. 각 블록에 포함된 머클루트의 정보를 통해 특정 거래의 존재여부를 확인할 수 있으며, 거래존재가 확인된 블록 이후로 6개의 블록이 쌓인 경우, 해당거래는 유효하다고 판단되어 거래에 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-정리&quot;&gt;6 정리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;블록체인은 분산원장 기술이라고 불림&lt;/li&gt;
  &lt;li&gt;원본 데이터를 알아볼 수 없도록 해시함수를 사용(위/변조 방지)&lt;/li&gt;
  &lt;li&gt;저장소 크기를 줄이기 위해 머클 트리(Merkle tree)가 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-참고문서&quot;&gt;○ 참고문서&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch09.asciidoc&quot;&gt;bitcoinbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 24 May 2022 15:00:00 +0900</pubDate>
        <link>https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/05/24/bitcoinbook_ch9.html</link>
        <guid isPermaLink="true">https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/05/24/bitcoinbook_ch9.html</guid>
        
        
        <category>all</category>
        
        <category>bitcoin</category>
        
        <category>마스터링 비트코인</category>
        
      </item>
    
      <item>
        <title>Flutter Project clean</title>
        <description>&lt;h1 id=&quot;flutter-project-clean-명령어-정리&quot;&gt;Flutter Project Clean 명령어 정리&lt;/h1&gt;
&lt;p&gt;flutter project를 clean 설치 하거나 git에서 브런치를 변경할때 가끔 build가 안될 경우와 이전 build와 충돌로 인해 에러가 발생할 경우 시도&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;개발환경&lt;/strong&gt;&lt;br /&gt;
OS MAC M1&lt;br /&gt;
[✓] Flutter (Channel master, 2.6.0-12.0.pre.431, on macOS 11.6 20G165 darwin-arm, locale ko-KR)&lt;br /&gt;
[✓] Android toolchain - develop for Android devices (Android SDK version 30.0.3)&lt;br /&gt;
[✓] Xcode - develop for iOS and macOS (Xcode 12.4)&lt;br /&gt;
[✓] Android Studio (version 4.1)&lt;br /&gt;
[✓] VS Code (version 1.60.2)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;명령어 정리&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ flutter clean
$ ./ios/ rm -rf Pods/  
$ ./ios/ rm -rf .symlinks  
$ ./ios/ rm -rf Podfile.lock  

$ ./ios/ pod deintegrate  
$ flutter packages upgrade  
$ flutter pub upgrade --major-versions  
$ sudo gem install cocoapods  
$ ./ios/ pod repo update       
$ ./ios/ pod install --repo-update
$ flutter pub get  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;git 으로 관리시 yaml 버전 달리지면&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ flutter downgrade 2.15.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 25 Apr 2022 21:00:00 +0900</pubDate>
        <link>https://hanscom95.github.io/all/flutter/issue/tip/2022/04/25/flutter-tip.html</link>
        <guid isPermaLink="true">https://hanscom95.github.io/all/flutter/issue/tip/2022/04/25/flutter-tip.html</guid>
        
        
        <category>all</category>
        
        <category>flutter</category>
        
        <category>issue</category>
        
        <category>tip</category>
        
      </item>
    
      <item>
        <title>마스터링 비트코인 ch8</title>
        <description>&lt;h1 id=&quot;마스터링-비트코인-ch8-네트워크&quot;&gt;마스터링 비트코인 ch8 네트워크&lt;/h1&gt;

&lt;h2 id=&quot;1-서론&quot;&gt;1. 서론&lt;/h2&gt;
&lt;p&gt;8장에서 설명하는 네트워크는 비트코인에서 사용되는 노드들의 블록체인 데이터를 전송하는 방식과 방법에 관한 내용이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;비트코인은 기존 금융 시스템과 달리 중앙 서버가 없는 탈 중앙화(Decentralization)네트워크&lt;/li&gt;
  &lt;li&gt;자율적으로 운영되며, 데이터가 한 곳에 집중되지 않고 각 노드(client)에 부산&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-네트워크-구성-및-노드의-유형&quot;&gt;2. 네트워크 구성 및 노드의 유형&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;노드의 특성
    &lt;ul&gt;
      &lt;li&gt;비트코인 노드는 지갑 서비스, 채굴, 블록체인 데이터베이스, 네트워크 라우팅 등 기능의 집합체&lt;/li&gt;
      &lt;li&gt;스마트폰과 같은 자원 제약이 있는 환경에서 실행되어야 하는 노드도 있기 때문에 노드 역할을 좀 더 다양화할 필요가 있음&lt;/li&gt;
      &lt;li&gt;Full Blockchain은 가장 최신의 블록체인 복사본을 가지고 있으며 외부 참조 없이도 독자적이고 신뢰할 수 있는 방법을 통해 어떠한 거래도 검증할 수 있음&lt;/li&gt;
      &lt;li&gt;요즘 점점 더 많은 SPV 노드 들이 Wallet이 되어 가고 있움
        &lt;ul&gt;
          &lt;li&gt;블록체인 전체가 아닌 블록의 헤더 정보만 가지고 있음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;아래 이미지가 확장 비트코인 네트워크 내에 있는 노드 중 가장 일반적인 형태
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch8_1.png&quot; alt=&quot;그림1&quot; /&gt;&lt;br /&gt;
그림1 비트코인 네트워크 노드 4가지 유형&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;노드의 유형
    &lt;ul&gt;
      &lt;li&gt;Reference Client
        &lt;ul&gt;
          &lt;li&gt;가장 일반적인 형태의 노드&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Full Block Chain Node
        &lt;ul&gt;
          &lt;li&gt;블록체인 전체를 관리하는 노드&lt;/li&gt;
          &lt;li&gt;현재까지 발생한 모든 거래내역들이 보관되어 있음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Solo Miner
        &lt;ul&gt;
          &lt;li&gt;단독 마이닝 노드라고부르며, 마이닝 풀에 의존하는 마이닝 노드아 다르게 단독으로 마이닝을 진행하는 노드(채굴만을 하는 노드)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Lightweight(SPV) Wallet
        &lt;ul&gt;
          &lt;li&gt;모바일과 같이 모든 정보를 가지고 있을 수 없는 환경에서 헤더 정보만을 가지고 있으며, 지갑 기능만을 수행하는 노드&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Pool Protocol Servers
        &lt;ul&gt;
          &lt;li&gt;마이닝 풀에 의존한느 마이닝 노드의 중앙 서버 역할을 수행하는 노드&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Mining Nodes
        &lt;ul&gt;
          &lt;li&gt;풀 프로토컬 서버로 부터 전달 받은 연산만을 수행하고, 연산 결과를 전달. 마이닝 풀에 의존하여 순전히 마이닝 기능만을 제공하는 노드&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Lightweight(SPV) Stratum wallet
        &lt;ul&gt;
          &lt;li&gt;라이트 노드와 동일하게 헤더 정보만을 가지고 있는 지갑역할을 수행하는 노드, 스트라텀 프로토콜을 사용하는 노드
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch8_2.png&quot; alt=&quot;그림2&quot; /&gt;&lt;br /&gt;
그림2 확장 비트코인 네트워크상에 있는 다양한 유형의 노드들&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch8_3.png&quot; alt=&quot;그림3&quot; /&gt;&lt;br /&gt;
그림3 다양한 노드 유형, 케이트웨이, 프로토콜을 보여 주는 확장 비트코인 네트워크&lt;/p&gt;

&lt;h2 id=&quot;3-네트워크-검색network-discovery&quot;&gt;3. 네트워크 검색(Network Discovery)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;네트워크 검색 1
    &lt;ul&gt;
      &lt;li&gt;새로운 노드를 작동시킬 때는 반드시 네트워크상에 존재하는 다른 비트코인 노드들을 검색해야만 네트워크에 참여할 수 있음&lt;/li&gt;
      &lt;li&gt;지리적 위치는 중요 하지 않음
        &lt;ul&gt;
          &lt;li&gt;비트코인 네트워크 토폴로지는 지리학적인 위치를 근거로 규정하는 것이 아님&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;일반적인 포트 8333번(대안 포트 있을시 그쪽으로 연결)&lt;/li&gt;
      &lt;li&gt;TCP 커넥션&lt;/li&gt;
      &lt;li&gt;핸드쉐이크 과정
        &lt;ol&gt;
          &lt;li&gt;연결이 될시 송신 노드가 version 메시지 전송&lt;/li&gt;
          &lt;li&gt;수신 노드는 연결을 승인할 경우 송신자에게 verack 응답&lt;/li&gt;
          &lt;li&gt;수신 노드가 양방향 연결을 원할 경우 version을 송신 노드에게 요청&lt;/li&gt;
          &lt;li&gt;송신 노드는 연결을 승인할 경우 수신자에게 verack 응답
  &lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch8_4.png&quot; alt=&quot;그림4&quot; /&gt;&lt;br /&gt;
  그림4 이웃 node 사이에 초기 핸드쉐이크 과정&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;기본적인 식별 정보
        &lt;ul&gt;
          &lt;li&gt;nVersion : 클라이언트가 구사하는 비트코인 P2P 프로토콜 버전 상수&lt;/li&gt;
          &lt;li&gt;nLocalServices : 노드가 지원하는 로컬 서비스 목록, NODE_NETWORK&lt;/li&gt;
          &lt;li&gt;nTIme : 현재시간&lt;/li&gt;
          &lt;li&gt;addrYou : 원격 노드의 IP주소&lt;/li&gt;
          &lt;li&gt;addrMe : 로컬 노드의 IP주소&lt;/li&gt;
          &lt;li&gt;subver : 로컬 노드에서 구동하는 소프트웨어 버전&lt;/li&gt;
          &lt;li&gt;BaseHeight : 로컬 노드가 알고 있는 블록체인의 블록 높이&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;네트워크 검색 2
    &lt;ul&gt;
      &lt;li&gt;새로운 노드는 비트코인 클라이언트 내에서 seed node로 클라이언트 등록되어 있는 안정되게 동작하는 노드들을 이용해서 빠르게 다른 노드를 검색&lt;/li&gt;
      &lt;li&gt;클라이언트를 구동할 때 종자 노드를 사용 하지 않으면 한 개 이상의 비트코인 노드 IP를 입력&lt;/li&gt;
      &lt;li&gt;주소 검색 프로토콜 핸드쉐이크 과정
        &lt;ol&gt;
          &lt;li&gt;새로운 노드가 자신의 ip주소를 수신 받을 노드에게 전송&lt;/li&gt;
          &lt;li&gt;getaddr 메시지를 수신 노드에게 전송(다른 노드들의 IP목록 요청)&lt;/li&gt;
          &lt;li&gt;자신과 연결되었던 노드들의 addr을 수신자에게 전송함
 &lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch8_5.png&quot; alt=&quot;그림5&quot; /&gt;&lt;br /&gt;
 그림5 주소 검색 프로토콜&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;새롭게 연결된 노드가 더 잘 알려지게 하여 연결성이 강해지게 됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bitcoin-cli getpeerinfo
[
  {
    &quot;id&quot;: 25, // peer index
    &quot;addr&quot;: &quot;82.64.20.76:8333&quot;, // peer ip address and port
    &quot;addrbind&quot;: &quot;172.17.0.2:42988&quot;,
    &quot;addrlocal&quot;: &quot;211.115.219.53:42988&quot;,
    &quot;network&quot;: &quot;ipv4&quot;,
    &quot;services&quot;: &quot;0000000000000409&quot;, // services offered 
    &quot;servicesnames&quot;: [
      &quot;NETWORK&quot;,
      &quot;WITNESS&quot;,
      &quot;NETWORK_LIMITED&quot;
    ],
    &quot;relaytxes&quot;: true,
    &quot;lastsend&quot;: 1649054912, // 2022/04/04 06:48:32
    &quot;lastrecv&quot;: 1649054912, // 2022/04/04 06:48:32
    &quot;last_transaction&quot;: 1649054909,
    &quot;last_block&quot;: 1648811299,
    &quot;bytessent&quot;: 372700728, // total bytes sent 372MB
    &quot;bytesrecv&quot;: 1219889918, // total bytes received 1219MB
    &quot;conntime&quot;: 1644988847, // 2022/02/16 05:20:47
    &quot;timeoffset&quot;: 70,
    &quot;pingtime&quot;: 0.285239, // ping time
    &quot;minping&quot;: 0.255473,
    &quot;version&quot;: 70016, // peer version
    &quot;subver&quot;: &quot;/Satoshi:22.0.0/&quot;, // string version
    &quot;inbound&quot;: false, // Outbound
    &quot;bip152_hb_to&quot;: false,
    &quot;bip152_hb_from&quot;: false,
    &quot;startingheight&quot;: 723547, // starting height (block) of the peer
    &quot;synced_headers&quot;: 730354,
    &quot;synced_blocks&quot;: 730354,
    &quot;inflight&quot;: [
    ],
    &quot;addr_processed&quot;: 20807,
    &quot;addr_rate_limited&quot;: 0,
    &quot;permissions&quot;: [
    ],
    &quot;minfeefilter&quot;: 0.00001000,
    &quot;bytessent_per_msg&quot;: { // 송신된 유형별 메시지 데이터
      &quot;addrv2&quot;: 1067717,
      &quot;cmpctblock&quot;: 15911,
      &quot;feefilter&quot;: 32,
      &quot;getaddr&quot;: 24,
      &quot;getblocktxn&quot;: 1090,
      &quot;getdata&quot;: 60549038,
      &quot;getheaders&quot;: 1053,
      &quot;headers&quot;: 341108,
      &quot;inv&quot;: 304670574,
      &quot;notfound&quot;: 219,
      &quot;ping&quot;: 1082464,
      &quot;pong&quot;: 1083936,
      &quot;sendaddrv2&quot;: 24,
      &quot;sendcmpct&quot;: 858,
      &quot;sendheaders&quot;: 24,
      &quot;tx&quot;: 3886482,
      &quot;verack&quot;: 24,
      &quot;version&quot;: 126,
      &quot;wtxidrelay&quot;: 24
    },
    &quot;bytesrecv_per_msg&quot;: { // 수신된 유형별 메시지 데이터
      &quot;addrv2&quot;: 863191,
      &quot;blocktxn&quot;: 1838424,
      &quot;cmpctblock&quot;: 36865068,
      &quot;feefilter&quot;: 32,
      &quot;getdata&quot;: 399032,
      &quot;getheaders&quot;: 1053,
      &quot;headers&quot;: 397500,
      &quot;inv&quot;: 194440435,
      &quot;notfound&quot;: 1555,
      &quot;ping&quot;: 1083936,
      &quot;pong&quot;: 1082464,
      &quot;sendaddrv2&quot;: 24,
      &quot;sendcmpct&quot;: 66,
      &quot;sendheaders&quot;: 24,
      &quot;tx&quot;: 982916940,
      &quot;verack&quot;: 24,
      &quot;version&quot;: 126,
      &quot;wtxidrelay&quot;: 24
    },
    &quot;connection_type&quot;: &quot;outbound-full-relay&quot; // default outbound-full-relay
  }…
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;4-full-node-spv-node&quot;&gt;4 Full Node, SPV Node&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Full Node
    &lt;ul&gt;
      &lt;li&gt;모든 트랜잭션이 포함된 전체 블록체인을 유지하는 노드&lt;/li&gt;
      &lt;li&gt;풀 노드들 끼리 데이터를 동기화하여 데이터의 신뢰성과 일관성을 유지&lt;/li&gt;
      &lt;li&gt;풀 노드 블록체인 동기화 핸드쉐이크 과정
        &lt;ol&gt;
          &lt;li&gt;version 메시지로 시작(블록 높이를 알 수 있는 BestHeight 포함)&lt;/li&gt;
          &lt;li&gt;version 정보를 보고 노드들의 블록을 비교 블록체인상 가장 높은 블록의 해시와 getblocks 메시지 교환&lt;/li&gt;
          &lt;li&gt;inv 메시지를 송부 하여 500개의 블록 해시를 전송&lt;/li&gt;
          &lt;li&gt;해당 블록을 가지고 있지 않으면 getdata 블록을 전송&lt;/li&gt;
          &lt;li&gt;해시정보에 대한 블록 데이터 전송
 &lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch8_6.png&quot; alt=&quot;그림6&quot; /&gt;&lt;br /&gt;
 그림6 Full Node 블록체인 동기화&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;새롭게 연결된 노드가 더 잘 알려지게 하여 연결성이 강해지게 됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SPV Node
    &lt;ul&gt;
      &lt;li&gt;거래에 대한 모든 블록체인 노드를 저장하지 않고도 트랜잭션을 검증하는 방법&lt;/li&gt;
      &lt;li&gt;블록 헤더만을 다운로드&lt;/li&gt;
      &lt;li&gt;거래내용이 없기 떄문에 블록체인의 크기는 풀 블록체인 크기보다 약 1,000배 정도 작음&lt;/li&gt;
      &lt;li&gt;블록 헤더만을 갖고 있기 때문에 유효성 만을 검증할 수 있음(총 80바이트)
        &lt;ul&gt;
          &lt;li&gt;버전(4바이트)&lt;/li&gt;
          &lt;li&gt;이전 블록해시(32바이트)&lt;/li&gt;
          &lt;li&gt;머클루트 블록해시(32바이트)&lt;/li&gt;
          &lt;li&gt;블록 시간(4바이트)&lt;/li&gt;
          &lt;li&gt;nBits(4바이트)&lt;/li&gt;
          &lt;li&gt;nonce(4바이트)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;검증하기 위해 다른 노드들에게 의존&lt;/li&gt;
      &lt;li&gt;SPV 노드 블록 헤더 동기화 핸드쉐이크 과정
        &lt;ol&gt;
          &lt;li&gt;getheaders 메시지를 전송&lt;/li&gt;
          &lt;li&gt;header를 받아 블록 동기화(최대 2,000개 전송)
 &lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch8_7.png&quot; alt=&quot;그림7&quot; /&gt;&lt;br /&gt;
 그림7 SPV 블록 헤더 동기화&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;특정 데이터에 대해 요청할 경우 자신들의 지갑 내에 있는 주소가 유출될 수 있음&lt;/li&gt;
      &lt;li&gt;보안에 취약정을 해결하기 위해 블룸필터 기능 추가&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-블룸필터&quot;&gt;5 블룸필터&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;SPV 노드의 프라이버시 리스크 해결하기 위해 도입&lt;/li&gt;
  &lt;li&gt;확률적 검색 필터&lt;/li&gt;
  &lt;li&gt;패턴이 무엇인지 정확하게 규정할 필요 없이 원하는 패턴을 설명하는 방식&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki&quot;&gt;BIP-37&lt;/a&gt; 로 정의&lt;/li&gt;
  &lt;li&gt;N개의 해시 함수와 M개의 1비트 배열로 구성&lt;/li&gt;
  &lt;li&gt;N개의 해시 함수는 1에서 M사이의 출력 값을 가지며, 해당 출력값에 해당하는 인덱스는 비트배열을 1로 설정&lt;/li&gt;
  &lt;li&gt;출력결과는 M비트 배열을 N개가 1로 설정된 값&lt;/li&gt;
  &lt;li&gt;N과 M을 조절함으로 정확도와 프라이버시 보호 수준을 조절&lt;/li&gt;
  &lt;li&gt;블룸필터 작동 방식
    &lt;ul&gt;
      &lt;li&gt;8비트 필드&lt;/li&gt;
      &lt;li&gt;3개의 해시 함수&lt;/li&gt;
      &lt;li&gt;패턴 A는 K1, K2, K3 해시 함수 입력&lt;/li&gt;
      &lt;li&gt;결과 해시 값은 16개의 필드 중 하나&lt;/li&gt;
      &lt;li&gt;연산 과정
        &lt;ol&gt;
          &lt;li&gt;비트 배열을 0으로 초기화&lt;/li&gt;
          &lt;li&gt;패턴A 과정 진행&lt;/li&gt;
          &lt;li&gt;해시 함수의 입력값을 K1=3, K2=1, K3=14&lt;/li&gt;
          &lt;li&gt;각 비트 필드의 값을 1로 설정
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch8_8.png&quot; alt=&quot;그림8&quot; /&gt;&lt;br /&gt;
그림8 단순한 블룸필터 예시, 3개의 해시 함수와 16비트 필드
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch8_9.png&quot; alt=&quot;그림9&quot; /&gt;&lt;br /&gt;
그림9 단순한 블룸필터의 A패턴&lt;/li&gt;
          &lt;li&gt;패턴B과정 진행&lt;/li&gt;
          &lt;li&gt;해시 함수의 입력값을 K1=16, K2=1, K3=7&lt;/li&gt;
          &lt;li&gt;각 비트 필드의 값을 1로 설정, 원래 1로 설정되 있는 값은 그대로 내버려 둠&lt;/li&gt;
          &lt;li&gt;X패턴이 존재하는지 검증(존재할 가능성이 있지만 반드시 존재한다는 것은 아님)&lt;/li&gt;
          &lt;li&gt;검증 결과 maybe, yes
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch8_10.png&quot; alt=&quot;그림10&quot; /&gt;&lt;br /&gt;
그림10 단순한 블룸필터의 B패턴
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch8_11.png&quot; alt=&quot;그림11&quot; /&gt;&lt;br /&gt;
그림11 X 패턴이 존재하는지 검증&lt;/li&gt;
          &lt;li&gt;Y패턴 과정 진행&lt;/li&gt;
          &lt;li&gt;해시 함수의 입력값을 K1=16, K2=2, K3=7&lt;/li&gt;
          &lt;li&gt;Y패턴이 존재하는지 검증(존재할 가능성이 있지만 반드시 존재한다는 것은 아님)&lt;/li&gt;
          &lt;li&gt;검증 결과 K2의 2번째 필드 값이 0으로 설정 되어 있어 패턴이 확실히 일치하지 않음&lt;/li&gt;
          &lt;li&gt;Y패턴 테스트 결과 확실히 아님을 의미하는 최종 부정 일치
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch8_12.png&quot; alt=&quot;그림12&quot; /&gt;&lt;br /&gt;
그림12 Y 패턴이 존재하는지 검증&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;패턴을 제거하는 것은 불가능하며 수정이 필요할시 0으로 초기화 후에 패턴을 다시 추가&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-정리&quot;&gt;6 정리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;비트코인은 노드의 집합체를 구성하여 네트워크를 구성&lt;/li&gt;
  &lt;li&gt;노드가 네트워크에 접속을 하기 위해서는 최근에 연결된 노드나 시드 노드를 통하여 접속&lt;/li&gt;
  &lt;li&gt;네트워크 자원의 문제로 모든 노드와 계속하여 연결된 상태가 아니며 트래픽 상황에 따라 유동적으로 노드와 다시 연결&lt;/li&gt;
  &lt;li&gt;노드가 네트워크 상에서 특정 거래에 대한 검색을 하게 될 경우 블룸필터라는 해시 함수가 들어 있는 기능 이용, 프라이버시 유지&lt;/li&gt;
  &lt;li&gt;거래에 대한 출력값을 해시하여 목록으로 가지고 있으며 자기 거래 내부에 거래가 있으면 인지&lt;/li&gt;
  &lt;li&gt;블룸필터 내용을 다른 노드에게 전파하게 되며 다른 노드들은 같은 블룸필터를 사용하면서 거래 검색을 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-참고문서&quot;&gt;○ 참고문서&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch08.asciidoc&quot;&gt;bitcoinbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 13 Apr 2022 11:00:00 +0900</pubDate>
        <link>https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/04/13/bitcoinbook_ch8.html</link>
        <guid isPermaLink="true">https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/04/13/bitcoinbook_ch8.html</guid>
        
        
        <category>all</category>
        
        <category>bitcoin</category>
        
        <category>마스터링 비트코인</category>
        
      </item>
    
      <item>
        <title>마스터링 비트코인 ch7</title>
        <description>&lt;h1 id=&quot;마스터링-비트코인-ch7-트랜잭션-및-고급-스크립트&quot;&gt;마스터링 비트코인 ch7 트랜잭션 및 고급 스크립트&lt;/h1&gt;
&lt;p&gt;이번 장은 앞장에서 다뤘던 내용들의 복잡한 스크립트들을 다룬다.&lt;/p&gt;

&lt;h2 id=&quot;1-서론&quot;&gt;1. 서론&lt;/h2&gt;
&lt;p&gt;다중서명을 요구하는 스크립트를 이해 하며 다중서명의 문제를 해결하기 위한 P2SH&lt;/p&gt;

&lt;h2 id=&quot;2-다중서명multisignature&quot;&gt;2. 다중서명(Multisignature)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이름 그대로 다중서명을 요구하는 스크립트&lt;/li&gt;
  &lt;li&gt;잠금에 N개의 공개키가 사용되고, 그 중에 적어도 M개의 서명이 올바르게 제공될 때 잠금이 해제되는 스크립트로 M-of-N으로 표현
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;M  &amp;lt;Public Key 1&amp;gt; &amp;lt;Public Key 2&amp;gt; ... &amp;lt;Public Key N&amp;gt; N CHECKMULTISIG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;해제 스크립트는 다음과 같은 형식
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Signature 1&amp;gt; &amp;lt;Signature 2&amp;gt; ... &amp;lt;Signature M&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;CHECKMULTISIG 구현에는 버그 있음&lt;/li&gt;
  &lt;li&gt;M개를 스택에서 꺼내야 하는데 M+1 개를 꺼냄. 이 버그 때문에 연결된 스크립트의 맨 앞에 의미 없는 0을 추가
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 &amp;lt;Signature 1&amp;gt; &amp;lt;Signature 2&amp;gt; ... &amp;lt;Signature M&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;ex) 3개의 공개키 그 중 두 개 이상의 올바른 서명 스크립트는 2-of-3
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 &amp;lt;Signature B&amp;gt; &amp;lt;Signature C&amp;gt; 2 &amp;lt;Public Key A&amp;gt; &amp;lt;Public Key B&amp;gt; &amp;lt;Public Key C&amp;gt; 3 CHECKMULTISIG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;잠금 스크립트는 출력에 배치되는 지출 조건&lt;/li&gt;
  &lt;li&gt;잠금 스크립트는 공개키 또는 비트코인 주소(공개키 해시)가 포함되어 있어 scriptPubKey라 불림&lt;/li&gt;
  &lt;li&gt;잠금 해제 스크립트는 잠금 스크립트에 의해 출력에 설정된 조건을 해결하거나 만족시키는 스크립트로 출력을 사용&lt;/li&gt;
  &lt;li&gt;잠금 해제 스크립트는 모든 트랜잭션 입력의 일부&lt;/li&gt;
  &lt;li&gt;대개의 경우 개인키로 사용잔의 지갑에서 생성된 &lt;strong&gt;디지털 서명&lt;/strong&gt;이 있음. scriptSig라 불림&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-pay-to-script-hashp2sh&quot;&gt;3. Pay-to-Script-Hash(P2SH)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;복잡한 튼랜잭션 스크립트 사용을 좀 더 간단하게 할 수 있도록 2012년에 새롭게 도입&lt;/li&gt;
  &lt;li&gt;다중서명 스크립트의 문제를 해결&lt;/li&gt;
  &lt;li&gt;M-of-N 다중서명 스크립트 작성방법은 여러 가지 문제중 가장 중요한 트랜잭션 출력의 잠금 스크립트에 N개의 공개키 해시를 가져야 한다는 점. &lt;br /&gt;
비트코인은 트랜잭션 출력이 사용되기 전까지 UTXO로 관리, UTXO는 램 메모리를 사용하는 비용이 높음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;P2SH가 없는 복잡한 스크립트&lt;br /&gt;
|  Locking Script    |  2 PubKey1 PubKey2 PubKey3 PubKey4 PubKey5 5 CHECKMULTISIG  |    &lt;br /&gt;
|  Unlocking Script  |  0 Sig1 Sig2                                                |&lt;/p&gt;

&lt;p&gt;P2SH가 있는 복잡한 스크립트    &lt;br /&gt;
|  Redeem Script     |  2 PubKey1 PubKey2 PubKey3 PubKey4 PubKey5 5 CHECKMULTISIG  |&lt;br /&gt;
|  Locking Script    |  HASH160 &amp;lt;20-byte hash of redeem script&amp;gt; EQUA L             | &lt;br /&gt;
|  Unlocking Script  |  0 Sig1 Sig2 &lt;redeem script=&quot;&quot;&gt;                                |&lt;/redeem&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;P2SH는 공개키 해시 값들을 잠금 스크립트에 포함하지 않고, 별도 스크립트(Redeem Script)로 작성하고 해시 값만을 포함하게 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;31-p2sh의-이점&quot;&gt;3.1. P2SH의 이점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;복잡한 스크립트를 트랜잭션 출력에서 더 짧은 스크립트로 바뀌어 트랜잭션 크기를 작게 만듬&lt;/li&gt;
  &lt;li&gt;스크립트는 비트코인 주소로 코딩될 수 있음, 발시자와 살신자의 지갑에는 P2SH 구현을 위한 복잡한 엔지니어링 필요치 않음&lt;/li&gt;
  &lt;li&gt;스크립트를 작성하는 부담을 보낸 사람이 아닌 받는 사람에게 이동&lt;/li&gt;
  &lt;li&gt;긴 스크립트의 데이터 저장에 대한 부담을 출력(블록체인에 저장된 것은 UTXO 세트에 있음)에서 입력(블록체인에만 저장됨)으로 이동&lt;/li&gt;
  &lt;li&gt;긴 스크립트의 데이터 저장에 대한 부담을 현재 시간에서 미래 시간으로 이동&lt;/li&gt;
  &lt;li&gt;긴 스크립트의 거래 수수료 비용을 보낸 사람에게 받는 사람에게 옮김. 긴 스크립트를 사용하려면 받는 사람에게 보내야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-타임락timelocks&quot;&gt;4. 타임락(Timelocks)&lt;/h2&gt;
&lt;p&gt;트랜잭션의 시간을 기준으로 잠궈두는 것. 트랜잭션을 기준으로 적용되는 nLockTime 필드로 구현  &lt;br /&gt;
이중지불 문제가 발생할 수 있기 때문에 비트코인 시스템 초기부터 있어 왔지만 거의 사용되지 않음&lt;br /&gt;
잠겨 있는 트랜잭션은 특정 시간이 되기 전까지는 트랜잭션을 전송받은 노드에서 유효하지 않은 것이 되어 비트콩니 네트워크로 전파되지 않음. 
따라서 잠금 시간 전까지는 제약사항이 비트코인 시스템 밖에서만 존재하고 비트코인 시스템 내에서는 존재하지 않음&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;상대적 잠금시간
    &lt;ul&gt;
      &lt;li&gt;트랜잭션 수준이나 스크립트 수준으로 적용 가능&lt;/li&gt;
      &lt;li&gt;트랜잭션 수준의 타임락은 트랜잭션 입력마다 작성 가능하며, 트랜잭션 입력 필드 nSequence 로 작성&lt;/li&gt;
      &lt;li&gt;nSequence 는 메모리풀에 있는 트랜잭션을 수정할 수 있도록 하기 위한 필드&lt;/li&gt;
      &lt;li&gt;값이 0xFFFFFFFF 이면 채굴자들은 블록에 트랜잭션을 포함&lt;/li&gt;
      &lt;li&gt;CHECKSEQUENCEVERIFY 등장으로 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;nSequence를 사용한 상대적 잠금시간&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch7_1.png&quot; alt=&quot;그림1&quot; /&gt;&lt;br /&gt;
그림1 nSequence encoding의 BIP-68 정의
    &lt;ul&gt;
      &lt;li&gt;2^31보다 작으면 상대 타임락을 갖는 것으로 해석, 그렇지 않으면 상대 타임락이 적용되지 않음&lt;/li&gt;
      &lt;li&gt;타임 플래그를 사용해서 블록높이를 사용할 것인지 유닉스 타임스탬프를 사용할 것인지를 정함&lt;/li&gt;
      &lt;li&gt;타임플래그는 23번째 비트 값으로 설정&lt;/li&gt;
      &lt;li&gt;nSequence 값은 16비트로&lt;/li&gt;
      &lt;li&gt;최상위 비트 값은 nSequence 를 적용할 것인지에 대한 여부를 나타냄&lt;/li&gt;
      &lt;li&gt;nLockTime과 마찬가지로 nSequence값도 CHECKSEQUENCEVERIFY 입력 값보다 크거나 같아야 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Median-Time-Past
    &lt;ul&gt;
      &lt;li&gt;비트코인 시스템에서 시간의 정확성에 대해서 생각할 때는 비트코인 시스템이 P2P 네트워크라는 것에 주의&lt;/li&gt;
      &lt;li&gt;채굴자에 작성하는 점에도 주의&lt;/li&gt;
      &lt;li&gt;BIP-113은 P2P 네트워크에서 발생할 수 밖에 없는 시간 정확성 문제를 해결하기 위해 Median-Time-Past 방법을 정의&lt;/li&gt;
      &lt;li&gt;최근 11개의 블록들의 타임스탬프를 가지고 중간값을 구하고, 그 값을 시간 제약과 관련된 계산에 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-흐름제어기능을-가진-스크립트&quot;&gt;5. 흐름제어기능을 가진 스크립트&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;비트코인 스크립트의 조건부 절을 흐름제어라 불림. IF, THEN, ELSE 등의 구문을 사용.&lt;/li&gt;
  &lt;li&gt;표현식 무한 중첩 가능&lt;/li&gt;
  &lt;li&gt;조건부가 다른 조건을 포함할 수 있음&lt;/li&gt;
  &lt;li&gt;스크립트 언어 역방향&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;condition
IF
  code to run when condition is true
ELSE
  code to run when condition is false
ENDIF
code to run in either case
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-참고문서&quot;&gt;○ 참고문서&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch07.asciidoc&quot;&gt;bitcoinbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 21 Mar 2022 12:00:00 +0900</pubDate>
        <link>https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/03/21/bitcoinbook_ch7.html</link>
        <guid isPermaLink="true">https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/03/21/bitcoinbook_ch7.html</guid>
        
        
        <category>all</category>
        
        <category>bitcoin</category>
        
        <category>마스터링 비트코인</category>
        
      </item>
    
      <item>
        <title>evernym mobile sdk - simple sponsor</title>
        <description>&lt;h1 id=&quot;evernym-mobile-sdk---simple-sponsor-install&quot;&gt;evernym mobile sdk - Simple Sponsor install.&lt;/h1&gt;
&lt;p&gt;evernym react-native-white-label-app을 설치중 Sponsor server 설치가 필요해서 정리해본다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;개발환경&lt;/strong&gt;&lt;br /&gt;
OS MAC M1 / docker 20.10.8 / Ubuntu:bionic /&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;gitlab&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitlab.com/evernym/mobile/mobile-sdk/-/tree/main/examples/simple-sponsor&quot;&gt;gitlab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위에 설치 진행 방식 중 docker로 설치했다. M1이라 ARM 아키텍쳐 구조로 docker platform 설정을 바꿔저야 error가 발생하지 않는다.&lt;/p&gt;

&lt;p&gt;위에 방식 그대로 할시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unable to install libindy error&lt;/code&gt;가 발생한다.&lt;/p&gt;

&lt;p&gt;Dockerfile에서 시간대를 서울로 바꿔 주고 필요한 packge들 업데이트&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu:bionic
ENV DEBIAN_FRONTEND=&quot;noninteractive&quot; TZ=&quot;Asia/Seoul&quot;
ARG module
RUN apt-get update &amp;amp;&amp;amp; apt-get upgrade -y &amp;amp;&amp;amp; apt-get install -y \
    gnupg \
    pbuilder \
    ubuntu-dev-tools \
    apt-file \
    software-properties-common \
    ca-certificates

RUN update-ca-certificates -f -v

RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CE7709D068DB5E88 &amp;amp;&amp;amp;\
    add-apt-repository &quot;deb https://repo.sovrin.org/sdk/deb bionic stable&quot;

RUN apt-get update &amp;amp;&amp;amp; apt-get upgrade -y &amp;amp;&amp;amp; apt-get install -y \
    python3 \
    python3-pip \
    libsodium-dev \
    libtool \
    pkg-config \
    build-essential \
    autoconf \
    automake \
    uuid-dev \
    wget \
    libindy

COPY . /app
WORKDIR /app
RUN sh zeromq-setup.sh

RUN pip3 install -r requirements.txt
EXPOSE 4321
CMD [ &quot;python3&quot;, &quot;server.py&quot; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;docker build &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--platform amd64&lt;/code&gt; 명령어 추가&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;docker build and run&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker build --platform amd64 -f Dockerfile -t simple-sponsor .
$ docker run -it -p 4321:4321 -d simple-sponsor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 15 Mar 2022 15:40:00 +0900</pubDate>
        <link>https://hanscom95.github.io/all/did/ubuntu/docker/issue/2022/03/15/evernym-mobile-sdk-simple-sponsor.html</link>
        <guid isPermaLink="true">https://hanscom95.github.io/all/did/ubuntu/docker/issue/2022/03/15/evernym-mobile-sdk-simple-sponsor.html</guid>
        
        
        <category>all</category>
        
        <category>DID</category>
        
        <category>ubuntu</category>
        
        <category>docker</category>
        
        <category>issue</category>
        
      </item>
    
      <item>
        <title>IT 용어 정리</title>
        <description>&lt;h1 id=&quot;it-용어-정리&quot;&gt;IT 용어 정리&lt;/h1&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;블록체인&quot;&gt;블록체인&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;하이퍼렛져 페브릭(Hyperledger Fabric)&lt;/strong&gt;:&lt;br /&gt;
엔터프라이즈 블록체인 플랫폼을 위한 모듈형 블록체인 프레임워크인 동시에 사실상의 표준&lt;br /&gt;
개방형의 검증된 엔터프라이즈급 분산 원장 플랫폼&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;아파치 카프카(Apache Kafka)&lt;/strong&gt; :&lt;br /&gt;
분산 메시지 스트리밍 플랫이며 데이터 파이프 라인을 구성할 때 많이 사용&lt;br /&gt;
대용량 실시간 로그처리에 특화되어 개발된 오픈소스, 분산 및 복젝 구성과 더불어 Fault-Tolerant 한 안정적인 아키텍처와 빠른 성능으로 데이터를 처리함&lt;br /&gt;
중앙 집중형 메시지 관리 방식으로, 메시지의 생성과 소비와 관리를 완전히 독립시킨 구조&lt;br /&gt;
메시지를 관리하는 데이터 큐를 중앙에 두고, 독립적인 데이터의 발행과 소비가 이루어진다. publish / subscribe 모델 패턴&lt;br /&gt;
&lt;strong&gt;프로듀서&lt;/strong&gt;, &lt;strong&gt;카프카(브로커)&lt;/strong&gt;, &lt;strong&gt;컨슈머&lt;/strong&gt;, __주키퍼__로 분류
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;프로듀서&lt;/strong&gt;: 카프카와 통신하면서 메시지를 보내는 역할&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;컨슈머&lt;/strong&gt;: 카프카와 통신하면서 메시지를 가져오는 역할&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;주키퍼&lt;/strong&gt;: 컨슈머와 통신, 카프카의 메타데이터 정보를 저장, 카프카의 상태관리 등 목적으로 이용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;주키퍼(Zookeeper)&lt;/strong&gt; :&lt;br /&gt;
분산 애플리케이션을 위한 코디네이션 시스템이다. 분산 애플리케이션이 안정적인 서비스를 할 수 있도록 분산되어 있는 각 애플리케이션의 정보를 중앙에 집중하고 구성 관리, 그룹 관리 네이밍, 동기화 등의 서비스를 제공한다  &lt;br /&gt;
서버 여러대를 클러스터로 구성하고, 분산 애플리케이션들이 각각 클라이언트가 되어 주키퍼 서버들과 커넥션을 맺은 후 상태 정보 등을 주고 받는다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CA(Certificate Authority)&lt;/strong&gt; :
    &lt;ul&gt;
      &lt;li&gt;ID 등록 또는 LDAP에 사용자 레지스트리 연결&lt;/li&gt;
      &lt;li&gt;등록 인증서 발급(ECERT)&lt;/li&gt;
      &lt;li&gt;인증서 갱신 및 취소&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Orderer&lt;/strong&gt; :
    &lt;ul&gt;
      &lt;li&gt;transaction 순서 관리&lt;/li&gt;
      &lt;li&gt;특정 채널의 네트워크에 있는 많은 다른 응용 프로그램으로부터 제안 된 원장 갱신을 동시에 받는다. 이 작업은 제안 된 업데이트를 잘 정의 된 순서로 정렬 한 다음 후속 포를 위해 블록으로 패키지화 하는 것  &lt;br /&gt;
이 블록은 블록체인의 블록이 된다. 일단 Orderer가 원하는 크기의 블록을 생성하거나 최대 경과 시간 후에 블록은 특정 채널에서 연결된 모든 Peer로 전송된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Peer&lt;/strong&gt; :&lt;br /&gt;
장부 상태(Ledger State)와 체인코드(Chaincode)를 관리하는 네트워크 노드  &lt;br /&gt;
블록체인 네트워크는 Peer들의 집합 이다. Peer들은 Ledgers와 Chaincode(Smart Contracts)에 대해 호스팅하기에 블로체인 네트워크의 기본적인 요소이다.  &lt;br /&gt;
Ledger는 Chaincode로 인해 발생하는 모든 거래를 불변하게 기록한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DID(Decentralized Identifier)&lt;/strong&gt; :
    &lt;ul&gt;
      &lt;li&gt;탈중앙화 신원증명 또는 분산아이디&lt;/li&gt;
      &lt;li&gt;분산 원장 기술(DLT - Distributed Ledger Technology) 혹은 다른 형태의 분권형 네트워크에 등록되어 있기 때문에 중앙화된 등록 기관에 등록이 필요한지 않은 전세계적으로 유일한 식별자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SSI(Self-Sovereign identity)&lt;/strong&gt; :
    &lt;ul&gt;
      &lt;li&gt;자기 주권 신원&lt;/li&gt;
      &lt;li&gt;개인에게 디지털 신원에 대한 통제권을 부여하는 디지털 신원에 대한 접근 방식&lt;/li&gt;
      &lt;li&gt;SSI는 상호 작용에 대한 신뢰 구축의 어려움을 해결&lt;/li&gt;
      &lt;li&gt;DID를 활용하여 구현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SPV(Simple payment Verification)&lt;/strong&gt; :
    &lt;ul&gt;
      &lt;li&gt;거래에 대한 모든 블록체인을 저장하지 않고도 트랜잭션을 검증하는 방법&lt;/li&gt;
      &lt;li&gt;라이트 웨이트 노드(lightweight node) 또는 경량노드라 불림&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;거래가 블록 내에 있음을 보장&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;추가 블록이 체인에 추가된다는 확인 (작업 증명)을 제공. 실제로 거래가 유효한지 알아야 함.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;브레드월렛(Breadwallet)&lt;/strong&gt; :
    &lt;ul&gt;
      &lt;li&gt;비트코인 위주의 무료 오픈소스 지갑 응용 프로그램&lt;/li&gt;
      &lt;li&gt;보안 및 개인정보보호에 중점을 둔 암호화폐 지갑&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;디앱(DApp)&lt;/strong&gt; :
    &lt;ul&gt;
      &lt;li&gt;플랫폼 코인 위에서 작동하는 탈중앙화 분산 어플리케이션&lt;/li&gt;
      &lt;li&gt;
        &lt;h2 id=&quot;계정을-만들-때-이더리움-이오스-등-해당-블록체인-지갑을-보유해야-한다-해당-블록체인-서비스에-참여함으로-보상-암호화폐를-저장하고-거래하기-위해-지갑을-준비&quot;&gt;계정을 만들 때, 이더리움, 이오스 등 해당 블록체인 지갑을 보유해야 한다. 해당 블록체인 서비스에 참여함으로 보상 암호화폐를 저장하고 거래하기 위해 지갑을 준비&lt;/h2&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 10 Mar 2022 12:00:00 +0900</pubDate>
        <link>https://hanscom95.github.io/all/it%20%EC%9A%A9%EC%96%B4/2022/03/10/it-words-list.html</link>
        <guid isPermaLink="true">https://hanscom95.github.io/all/it%20%EC%9A%A9%EC%96%B4/2022/03/10/it-words-list.html</guid>
        
        
        <category>all</category>
        
        <category>IT 용어</category>
        
      </item>
    
      <item>
        <title>마스터링 비트코인 ch6</title>
        <description>&lt;h1 id=&quot;마스터링-비트코인-ch6-거래&quot;&gt;마스터링 비트코인 ch6 거래&lt;/h1&gt;

&lt;h2 id=&quot;1-서론&quot;&gt;1. 서론&lt;/h2&gt;
&lt;p&gt;6장에서 설명하는 지갑은 키가 들어 있는 데이터베이스가 아니라 거래를 구성하는 소프트웨어라고 되어 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;거래란 비트코인 시스템 내에 있는 참가자들 간 가치를 전송하는 행위를 인코딩한 데이터 구조&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-거래-세부-사항&quot;&gt;2. 거래 세부 사항&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;비트코인 어플리케이션 사용자 인터페이스에서 볼 수 있는 고급 구성 요소들은 비트코인 시스템 내에 실제로 존재하지 않는다.
    &lt;blockquote&gt;
      &lt;p&gt;‘실제로 존재하지 않거나 단일 거래에 존재하지 않는다’가 맞는 표현 같음&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래 코드는 Raw 트랜잭션을 검색하고 디코딩 내용 이다. 해당 내용으로는 코인, 발신자, 수신자, 잔액, 계정 및 주소가 없다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bitcoin-cli getrawtransaction 7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18
0100000001524d288f25cada331c298e21995ad070e1d1a0793e818f2f7cfb5f6122ef3e71000000008c493046022100a59e516883459706ac2e6ed6a97ef9788942d3c96a0108f2699fa48d9a5725d1022100f9bb4434943e87901c0c96b5f3af4e7ba7b83e12c69b1edbfe6965f933fcd17d014104e5a0b4de6c09bd9d3f730ce56ff42657da3a7ec4798c0ace2459fb007236bc3249f70170509ed663da0300023a5de700998bfec49d4da4c66288a58374626c8dffffffff0180969800000000001976a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac00000000

$ bitcoin-cli decoderawtransaction 0100000001524d288f25cada331c298e21995ad070e1d1a0793e818f2f7cfb5f6122ef3e71000000008c493046022100a59e516883459706ac2e6ed6a97ef9788942d3c96a0108f2699fa48d9a5725d1022100f9bb4434943e87901c0c96b5f3af4e7ba7b83e12c69b1edbfe6965f933fcd17d014104e5a0b4de6c09bd9d3f730ce56ff42657da3a7ec4798c0ace2459fb007236bc3249f70170509ed663da0300023a5de700998bfec49d4da4c66288a58374626c8dffffffff0180969800000000001976a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac00000000
{
  &quot;txid&quot;: &quot;7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18&quot;,
  &quot;hash&quot;: &quot;7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18&quot;,
  &quot;version&quot;: 1,
  &quot;size&quot;: 225,
  &quot;vsize&quot;: 225,
  &quot;weight&quot;: 900,
  &quot;locktime&quot;: 0,
  &quot;vin&quot;: [
    {
      &quot;txid&quot;: &quot;713eef22615ffb7c2f8f813e79a0d1e170d05a99218e291c33daca258f284d52&quot;,
      &quot;vout&quot;: 0,
      &quot;scriptSig&quot;: {
        &quot;asm&quot;: &quot;3046022100a59e516883459706ac2e6ed6a97ef9788942d3c96a0108f2699fa48d9a5725d1022100f9bb4434943e87901c0c96b5f3af4e7ba7b83e12c69b1edbfe6965f933fcd17d[ALL] 04e5a0b4de6c09bd9d3f730ce56ff42657da3a7ec4798c0ace2459fb007236bc3249f70170509ed663da0300023a5de700998bfec49d4da4c66288a58374626c8d&quot;,
        &quot;hex&quot;: &quot;493046022100a59e516883459706ac2e6ed6a97ef9788942d3c96a0108f2699fa48d9a5725d1022100f9bb4434943e87901c0c96b5f3af4e7ba7b83e12c69b1edbfe6965f933fcd17d014104e5a0b4de6c09bd9d3f730ce56ff42657da3a7ec4798c0ace2459fb007236bc3249f70170509ed663da0300023a5de700998bfec49d4da4c66288a58374626c8d&quot;
      },
      &quot;sequence&quot;: 4294967295
    }
  ],
  &quot;vout&quot;: [
    {
      &quot;value&quot;: 0.10000000,
      &quot;n&quot;: 0,
      &quot;scriptPubKey&quot;: {
        &quot;asm&quot;: &quot;OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG&quot;,
        &quot;hex&quot;: &quot;76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac&quot;,
        &quot;address&quot;: &quot;1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK&quot;,
        &quot;type&quot;: &quot;pubkeyhash&quot;
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-거래-출력값과-입력값&quot;&gt;3 거래 출력값과 입력값&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;UTXO(Unspent Transaction output)&lt;br /&gt;
소비되지 않은 거래 출력값&lt;/li&gt;
  &lt;li&gt;거래
    &lt;ul&gt;
      &lt;li&gt;모든 거래는 UTXO세트 내의 변화(상태 변화)를 의미&lt;/li&gt;
      &lt;li&gt;아래 그림의 UTXO세트에서 점선은 UTXO세트에서 제외될 것이며 녹색 바탕은 UTXO세트로 추가&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;출력값
    &lt;ul&gt;
      &lt;li&gt;개별적&lt;/li&gt;
      &lt;li&gt;나눌 수 없는 가치의 단위&lt;/li&gt;
      &lt;li&gt;정수로 된 사토시 단위로 표현&lt;/li&gt;
      &lt;li&gt;소비되지 않은 출력값을 거래에서 통째로 소비될 수만 있음
        &lt;ul&gt;
          &lt;li&gt;잔액은 해당 거래에 출력값으로 추가되며 다른 거래의 입력값이 됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;코인베이스 거래
    &lt;ul&gt;
      &lt;li&gt;입력값과 출력값에 대한 특수한 유형의 거래&lt;/li&gt;
      &lt;li&gt;각 블록 내의 첫번째 거래&lt;/li&gt;
      &lt;li&gt;채굴에 성공한 채굴자에 의해 생성&lt;/li&gt;
      &lt;li&gt;새 비트코인 생성&lt;/li&gt;
      &lt;li&gt;UTXO를 소비하지 않고 코인베이스라는 이름을 가짐
        &lt;ul&gt;
          &lt;li&gt;vin.txid 대신 vin.coinbase&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch6_1.png&quot; alt=&quot;그림1&quot; /&gt;&lt;br /&gt;
그림1 블록체인을 기반으로 구축되는 Joe에서 Gopesh까지의 트랜잭션 체인&lt;/p&gt;

&lt;h3 id=&quot;31-거래-출력값&quot;&gt;3.1 거래 출력값&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;거래 출력값 구성
    &lt;ul&gt;
      &lt;li&gt;비트코인의 최소 단위인 사토시로 표현되는 비트코인 금액&lt;/li&gt;
      &lt;li&gt;출력값을 소비하기 위해 필요한 조건을 결정하는 암호 퍼즐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;암호퍼즐
    &lt;ul&gt;
      &lt;li&gt;잠금 스크립트(locking script), 서명 스크립트(witness script), scriptPubKey&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;decoderawtransaction 중 vout(위에 코드 값으로 확인)
    &lt;ul&gt;
      &lt;li&gt;value.scriptPubKey만 저장됨&lt;/li&gt;
      &lt;li&gt;그 외 값은 어플리케이션에서 해석&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Size&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Field&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;8 bytes(little-endian)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Amount&lt;/td&gt;
      &lt;td&gt;Bitcoin value in satoshis(10^-8 bitcoin)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1-9 bytes(VarInt)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Locking-Script Size&lt;/td&gt;
      &lt;td&gt;Locking-Script length in bytes, to follow(실제로 1~9 bytes 중 몇 byte인지 어떻게 확인할 수 있을까?)&lt;br /&gt;인터넷 사이트에는 10,000 bytes까지로 되어 있음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Variable&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Locking-Script&lt;/td&gt;
      &lt;td&gt;A script defining the conditions needed to spend the output&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;32-거래-입력값&quot;&gt;3.2 거래 입력값&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;거래 입력값 구성
    &lt;ul&gt;
      &lt;li&gt;소비될 UTXO의 거래 ID: 해당 거래의 해시와 일련번호를 참조하여 한 UXTO를 지시&lt;/li&gt;
      &lt;li&gt;해제 스크립트 : UTXO 소비 요건을 만족하기 위해 지갑을 구성하며 대부분의 해제 스크립트는 비트코인의 소유권을 증명하는 디지털 서명 및 공개키&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;decoderawtransaction 중 vin
    &lt;ul&gt;
      &lt;li&gt;거래 ID(txid): 소비될 UTXO가 담겨 있는 거래를 참조(거래에는 여러 UTXO가 있을 수 있음)&lt;/li&gt;
      &lt;li&gt;출력값 인덱스(vout): 참조 거래에서 어떤 UTXO가 참조될지 식별, 참조 거래 vout배열의 인덱스, 첫번째 UTXO의 값은 0&lt;/li&gt;
      &lt;li&gt;스크립트 시그(scriptSig): 참조된 UTXO의 조건을 만족하며, 소비를 위해 UTXO를 해제, 앨리스의 지갑이 참조된 UTXO를 추적하고 그에 대한 잠금 스크립틀르 점검한 후 잠금 스크립트를 이용해 필요한 해제 스크립트를 만듦&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;참조 거래의 vout 중 소비될 UTXO가 현재 거래의 vin과 연결&lt;/li&gt;
  &lt;li&gt;참조 거래를 getrawtransaction, decoderawtransaction한 뒤 vout을 확인
    &lt;ul&gt;
      &lt;li&gt;입력값이 0.1 BTC임&lt;/li&gt;
      &lt;li&gt;잠금 스크립트(scriptPubKey)를 가지고 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Size&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Field&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;32 bytes(little-endian)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Transaction Hash&lt;/td&gt;
      &lt;td&gt;Pointer to the transaction containing the UTXO to be spent&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4 bytes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Output Index&lt;/td&gt;
      &lt;td&gt;The index number of the UTXO to be spent; first one is 0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1-9 bytes(VarInt)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Unlocking-Script Size&lt;/td&gt;
      &lt;td&gt;Unlocking-Script length in bytes, to follow(실제로 1~9 bytes 중 몇 byte인지 어떻게 확인할 수 있을까?)&lt;br /&gt;인터넷 사이트에는 10,000 bytes까지로 되어 있음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Variable&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Unlocking-Script&lt;/td&gt;
      &lt;td&gt;A script that fulfills the conditions of the UTXO locking script&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4 bytes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Sequence Number&lt;/td&gt;
      &lt;td&gt;Used for locktime or disabled (0xFFFFFFFF)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;33-거래-수수료&quot;&gt;3.3 거래 수수료&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;비트코인 네트워크를 안전하게 유지해 주는 역할을 하는 비트코인 채굴자들에게 제공하는 일종의 보상금&lt;/li&gt;
  &lt;li&gt;공격자들이 네트워크를 거래로 넘쳐나게 하는 일을 경제적 측면에서 실행 불가능하게 함으로써 그 자체로 보안 매커니즘의 역할도 함&lt;/li&gt;
  &lt;li&gt;비트코인 단위로 체굴되는 거래 가치보다는 킬로바이트 단위의 거래 크기를 근거로 계산&lt;/li&gt;
  &lt;li&gt;비트코인 내의 시장의 힘에 의해 결정&lt;/li&gt;
  &lt;li&gt;채굴자는 수수료 등 여러 가지 기준에 따라 거래의 우선순위를 정함&lt;/li&gt;
  &lt;li&gt;특정 거래에서는 무료 거래를 진행하기도 함&lt;/li&gt;
  &lt;li&gt;비트코인 코어에 수수료 중개(fee relay) 정책이 최소 중개거래 수수료(minrelaytxfee) 옵션에 의해 결정됨&lt;/li&gt;
  &lt;li&gt;거래의 데이터 구조에는 수수료 필드가 없음&lt;/li&gt;
  &lt;li&gt;Fees = Sum(Inputs) - Sum(Outputs)&lt;/li&gt;
  &lt;li&gt;Output에는 반드시 잔액에 대한 출력값도 포함해야 함. 그렇지 않으면 모든 잔액이 수수료로 취급&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-거래-스크립트와-스크립트-언어&quot;&gt;4 거래 스크립트와 스크립트 언어&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;스크립트 언어는 포스(Forth) 언어처럼 구성되고 역폴란드 표기법을 따르는 스택 기반의 실행 언어&lt;/li&gt;
  &lt;li&gt;거래가 유효화될 때 입력값 각각에 들어 있는 해제 스크립트(scriptSig)는 소비 조건을 만족하는지 여부를 알아보기 위해 대응되는 잠금 스크립트(scriptPubKey)와 함께 실행&lt;/li&gt;
  &lt;li&gt;최소한의 프로세싱만 지원하므로 의도적인 보안을 제공&lt;/li&gt;
  &lt;li&gt;Pay-to-Public-Key-Hash 스크립트 기반이나 매우 다양하고 복잡한 조건을 표현하기 위해 잠금 스크립트를 사용할 수 있음&lt;/li&gt;
  &lt;li&gt;튜링 불완전성(Turing Incompleteness)
    &lt;ul&gt;
      &lt;li&gt;스크립트 언어는 조건부 흐름 제어 기능 이외에는 루프나 복잡한 흐름 제어 능력을 가지고 있지 않음 -&amp;gt; 튜링이 완전하지 않음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;무상태 검증(Stateless Verification)
    &lt;ul&gt;
      &lt;li&gt;스크립트 언어는 무상태형&lt;/li&gt;
      &lt;li&gt;스크립트 언어 내에서는 스크립트 실행 전 혹은 실행 후 저장되는 상태가 없음&lt;/li&gt;
      &lt;li&gt;스크립트를 실행하는 데 필요한 모든 정보는 스크립트 내에 담겨 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;41-잠금-스크립트locking-script&quot;&gt;4.1 잠금 스크립트(locking script)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;출력값에 위치&lt;/li&gt;
  &lt;li&gt;향후 출력값을 소비하기 위해 충족되어야 하는 요건을 명시&lt;/li&gt;
  &lt;li&gt;역사적으로 보통 공개키 혹은 비트코인 주소(공개키 해시)가 담겨 있기 때문에 스크립트펍키(scriptPubKey)라고 부르기도 했음&lt;/li&gt;
  &lt;li&gt;서명 스크립트(witness script), 암호퍼즐(cryptographic puzzle)들도 추상화되어 모두 같은 개념&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;42-해제-스크립트unlocking-script&quot;&gt;4.2 해제 스크립트(unlocking script)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;임력값에 위치&lt;/li&gt;
  &lt;li&gt;잠금 스크립트가 출력값에 놓아 둔 조건을 해결하거나 충족시켜서 출력값이 소비될 수 있도록 하는 스크립트&lt;/li&gt;
  &lt;li&gt;대부분의 경우 사용자의 지갑이 개인키로부터 생성한 디지털 서명을 담고 있기 때문에 스크립트시그(scriptSig)라고 불림&lt;/li&gt;
  &lt;li&gt;해제 스크립트 전부가 서명을 포함해야 하는 것은 아님&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch6_2.png&quot; alt=&quot;그림2&quot; /&gt;&lt;br /&gt;
그림2 scriptSig 및 scriptPubKey를 결합하여 트랜잭션 스크립트 평가&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;거래 입력값(UTXO참조, 해제 스크립트) -&amp;gt; 참조 거래의 UTXO(잠금 스크립트) -&amp;gt; 스크립트 실행(1.해제 스크립트, 2.잠금 스크립트) -&amp;gt; 입력값 유효화&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;-참고문서&quot;&gt;○ 참고문서&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch06.asciidoc&quot;&gt;bitcoinbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 07 Mar 2022 11:00:00 +0900</pubDate>
        <link>https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/03/07/bitcoinbook_ch6.html</link>
        <guid isPermaLink="true">https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/03/07/bitcoinbook_ch6.html</guid>
        
        
        <category>all</category>
        
        <category>bitcoin</category>
        
        <category>마스터링 비트코인</category>
        
      </item>
    
      <item>
        <title>마스터링 비트코인 ch5</title>
        <description>&lt;h1 id=&quot;마스터링-비트코인-ch5-지갑&quot;&gt;마스터링 비트코인 ch5 지갑&lt;/h1&gt;

&lt;h2 id=&quot;1-서론---지갑&quot;&gt;1. 서론 - 지갑&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;사용자 인터페이스 역할을 하는 주요 어플리케이션&lt;/li&gt;
  &lt;li&gt;사용자의 키를 저장하고 관리하는데 사용되는 데이터 구조&lt;/li&gt;
  &lt;li&gt;구조 파일이나 데이터베이스로 구현되는 개인키 저장소&lt;/li&gt;
  &lt;li&gt;개인키/공개키 쌍이 담겨있는 열쇠고리&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-지갑-기술의-개요&quot;&gt;2. 지갑 기술의 개요&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;지갑의 분류는 비결정적 지갑, 결정적 지갑으로 나뉜다.
    &lt;blockquote&gt;
      &lt;p&gt;비트코인 지갑에는 키만 들어있으며, 코인은 들어있지 않다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;21-비결정적-지갑&quot;&gt;2.1 비결정적 지갑&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;각각의 키가 난수 생성기로부터 독립적으로 생성&lt;/li&gt;
  &lt;li&gt;지갑 내 키들은 서로 연관성 없음&lt;/li&gt;
  &lt;li&gt;무작위로 생성한 후 필요한 만큼 추가로 생성하며, 각 키들은 단 한번만 사용
    &lt;ul&gt;
      &lt;li&gt;무작위로 뽑은 키들이 한번 생성된 후에는 모두 복사본을 보관해야 함&lt;/li&gt;
      &lt;li&gt;지갑이 자주 백업되어야 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;주소를 다시 사용하게 되면 여러 건의 거래와 주소가 연관되기 때문에 프라이버시 노출&lt;/li&gt;
  &lt;li&gt;JBOK지갑(Just a Bunch Of Keys)&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch5_1.png&quot; alt=&quot;그림1&quot; /&gt;&lt;br /&gt;
그림1 비결정적 지갑: 무작위로 생성된 키 모음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;22-결정적-지갑&quot;&gt;2.2 결정적 지갑&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;단일 시드(Seed)로부터 많은 키를 쉽게 얻기 위해 개발&lt;/li&gt;
  &lt;li&gt;모든 키가 시드(Seed)라고 알려져있는 하나의 마스터 키에서 파생&lt;/li&gt;
  &lt;li&gt;지갑 내 모든 키들은 서로 연관&lt;/li&gt;
  &lt;li&gt;시드(Seed) 원본을 가지고 있으면 누구나 다시 지갑 생성 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;221-일반-결정적-지갑&quot;&gt;2.2.1 일반 결정적 지갑&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;일반적으로 해시 함수를 이용하여 공통 시드에서 얻은 개인키 보관&lt;/li&gt;
  &lt;li&gt;시드는 개인키를 추출하기 위해 색인번호나 ‘체인코드’등의 여러 데이터와 무작위로 생성된 숫자가 결합되어 있는 형태&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch5_2.png&quot; alt=&quot;그림2&quot; /&gt;&lt;br /&gt;
그림2 결정적(Seed) 지갑: 시드에서 파생된 결정론적 키 시퀀스&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;222-hd계층결정적-지갑-bip-32bip-44&quot;&gt;2.2.2 HD(계층결정적) 지갑 [BIP-32/BIP-44]&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;결정적 지갑 중 가장 발달된 유형&lt;/li&gt;
  &lt;li&gt;트리 구조에서 생성된 키 보관&lt;/li&gt;
  &lt;li&gt;BIP-32표준에서 규정
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch5_3.png&quot; alt=&quot;그림3&quot; /&gt;&lt;br /&gt;
그림3 결정적 지갑: 단일 시드에서 생성된 키 트리
    &lt;blockquote&gt;
      &lt;p&gt;사용자들이 공개키에 대응하는 개인키에 접근하지 않고도 공개키 열을 생성할 수 있음. 안전하지 않은 서버 상에서나 수신 기능만을 가지고 있는 서버에서도 HD지갑 사용 가능하며 각각의 거래에 대해 다른 공개키를 발급 받을 수 있음&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-자세한-지갑-기술&quot;&gt;3. 자세한 지갑 기술&lt;/h2&gt;
&lt;p&gt;비트코인 지갑 기술이 발전함에 따라 상호운용성, 편리성, 안전성, 유연성 강화를 위한 공통의 산업 표준이 등장&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;BIP-39 기반 연상기호 코드 워드&lt;/li&gt;
  &lt;li&gt;BIP-32 기반 HD 지갑&lt;/li&gt;
  &lt;li&gt;BIP-43 기반 다용도 HD 지갑 구조&lt;/li&gt;
  &lt;li&gt;BIP-44 기반 복수 계좌&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;31-bip-39-기반-연상기호-코드-워드&quot;&gt;3.1 BIP-39 기반 연상기호 코드 워드&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;결정적 지갑을 추출하기 위해 시드를 이용한 난수를 인코딩 하는 영어 단어열[니모닉(Mnemonic) 코드 워드]&lt;/li&gt;
  &lt;li&gt;단어열만 있으면 시드를 재현할 수 있고, 시드에서 지갑과 추출키 전부를 재현할 수 있다.&lt;/li&gt;
  &lt;li&gt;연상기호 코드는 무작위 순열에 비해 쉽게 읽히고 정확하게 입력되기 때문에 사용자들이 지갑을 백업하는 작업을 더욱 수월하게 해준다.&lt;/li&gt;
  &lt;li&gt;연상기호 코드를 이용해 결정론적 지갑을 실행하는 지갑 어플리케이션은 처음 지갑을 생성할 때 12-24 단어로 구성된 단어열을 사용자에게 보여준다. 단어열은 지갑을 백업해 놓은 것으로 동일한 지갑 어플리케이션이나 호환가능한 지갑 어플리케이션안에 들어있는 키 전부를 복원하고 재현하는데 사용할 수 있다.
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch5_4.png&quot; alt=&quot;그림4&quot; /&gt;
그림4 엔트로피 생성해서 연상기호 워드로 인코딩 과정&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch5_5.png&quot; alt=&quot;그림5&quot; /&gt;
그림5 니모닉에서 시드로
    &lt;blockquote&gt;
      &lt;p&gt;2048 라운드의 해싱이 포함된 키 홛장 기능은 니모닉 또는 암호 문구에 대한 무차별 대입 공격에 대해 효과적인 보호 기능(계산시 많은 비용 소모)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32-시드로부터-hd-지갑-생성&quot;&gt;3.2 시드로부터 HD 지갑 생성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;128, 256, 512비트 크기의 무작위 숫자인 루트 시드(Root Seed) 한개로부터 생성된다. 이 시드는 연상기호에 생성되는 것이 가장 일반적&lt;/li&gt;
  &lt;li&gt;모든 키들은 이 루트 시드로부터 결정적으로 추출되며, 이 루트 시드 덕분에 호환 가능한 어떤 HD 지갑에서도 HD 지갑 전체를 재현할 수 있다. 수천 혹은 수백만 개의 키를 담고 있는 HD 지갑 이라도 루트 시다만 전송하면 백업이나 복원, export, import가 가능&lt;/li&gt;
  &lt;li&gt;루트 시드는 HMAC-SHA512 알고리즘에 입력되고, 그 결과로 나온 해시값이 마스터 개인키와 마스터 체인코드를 생성&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch5_6.png&quot; alt=&quot;그림6&quot; /&gt;
그림6 루트 시드에서 마스터 키와 체인코드 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-참고문서&quot;&gt;○ 참고문서&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch05.asciidoc&quot;&gt;bitcoinbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 28 Feb 2022 10:42:00 +0900</pubDate>
        <link>https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/02/28/bitcoinbook_ch5.html</link>
        <guid isPermaLink="true">https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/02/28/bitcoinbook_ch5.html</guid>
        
        
        <category>all</category>
        
        <category>bitcoin</category>
        
        <category>마스터링 비트코인</category>
        
      </item>
    
      <item>
        <title>마스터링 비트코인 ch4 addr code error</title>
        <description>&lt;h1 id=&quot;마스터링-비트코인-ch4-addr-error-bitcoinbitcoinhpp-no-such-file-or-directory&quot;&gt;마스터링 비트코인 ch4 addr error. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bitcoin/bitcoin.hpp: no such file or directory&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;마스터링 비트코인 ch4장에 나오는 cpp 예제 중 addr.cpp 아래 소스대로 되어야 할 부분이 버전 문제인지 에러가 발생&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;No package &apos;libbitcoin&apos; found fatal error: bitcoin/bitcoin.hpp: No such file or directory&lt;/code&gt;&lt;br /&gt;
찾아보니 libbitcoin 라이브러리가 최신 버전으로 설치되어 있어 소스를 수정 했다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;예제&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Compile the addr.cpp code
$ g++ -o addr addr.cpp -std=c++11 $(pkg-config --cflags --libs libbitcoin)
# Run the addr executable
$ ./addr
Public key: 0202a406624211f2abbdc68da3df929f938c3399dd79fac1b51b0e4ad1d26a47aa
Address: 1PRTTaJesdNovgne6Ehcdu1fpEdX7913CK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;에러&lt;/strong&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch4_addr1.png&quot; alt=&quot;addr error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;소스수정&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addr.cpp

#include &amp;lt;bitcoin/bitcoin.hpp&amp;gt; 
------------------------------  
#include &amp;lt;bitcoin/system.hpp&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;실행명령어 추가(–static)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ g++ -o addr ./addr.cpp -std=c++11 $(pkg-config --cflags --libs --static libbitcoin-system)
$ ./addr
Public key: 0202a406624211f2abbdc68da3df929f938c3399dd79fac1b51b0e4ad1d26a47aa
Address: 1PRTTaJesdNovgne6Ehcdu1fpEdX7913CK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이래도 안될시 PKG_CONFIG_PATH가 안잡혀 있을 수 있다. home root에 ln 설정 해주면 해결&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vi  ~/.bahrc
export PKG_CONFIG_PATH=/path/to/libbitcoin-installation/lib/pkgconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 24 Feb 2022 13:10:00 +0900</pubDate>
        <link>https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/issue/2022/02/24/bitcoinbook_ch4_addr_code_issue.html</link>
        <guid isPermaLink="true">https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/issue/2022/02/24/bitcoinbook_ch4_addr_code_issue.html</guid>
        
        
        <category>all</category>
        
        <category>bitcoin</category>
        
        <category>마스터링 비트코인</category>
        
        <category>issue</category>
        
      </item>
    
      <item>
        <title>마스터링 비트코인 ch4</title>
        <description>&lt;h1 id=&quot;마스터링-비트코인-ch4-keys-address&quot;&gt;마스터링 비트코인 ch4 Keys, Address&lt;/h1&gt;
&lt;p&gt;이번 장은 비트코인 암호화 관련된 내용인데 암호화 관련 지식이 없어 내용을 이해하는데 어려움이 생긴다.&lt;br /&gt;
수학적 내용까지 완벽히 이해 하기 어려우니 겉으로나마 진도를 빼기 위해서 다음 장을 넘어가려고 한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;암호화는 비밀을 공개하지 않고 비밀에 대한 지식을 증명하거나(디지털 서명) 데이터의 진위를 증명하는데 사용할 수도 있다.(비트코인 주소)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-서론&quot;&gt;1. 서론&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;비트코인에 대한 소유권은 ‘디지털 키, 비트코인 주소, 디지털 서명’으로 성립&lt;/li&gt;
  &lt;li&gt;디지털 키는 실제로 네트워크에 저장되는 것이 아님, 사용자가 지갑이라는 파일 또는 간단한 데이터베이스에 저장&lt;/li&gt;
  &lt;li&gt;키는 개인(private)키와 공개(public)키로 구성된 쌍으로 구성&lt;/li&gt;
  &lt;li&gt;비트코인 시스템은 탈중앙화된 기술로 이루어져 있음&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch4_1.png&quot; alt=&quot;그림1&quot; /&gt;
그림1 개인키, 공개키 주소 변환 과정&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-개인키private-key&quot;&gt;2. 개인키(Private Key)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;무작위로 추출된 숫자(randomly)&lt;/li&gt;
  &lt;li&gt;OS 내부의 난수생성기를 이용 256비트의 난수 생성&lt;/li&gt;
  &lt;li&gt;16진수로 표기시 64자리&lt;/li&gt;
  &lt;li&gt;잃어버리면 다신 찾을 수 없다!
    &lt;blockquote&gt;
      &lt;p&gt;개인키는 1에서 n-1 사이의 암호화를 사용한 방법으로 생성되는 랜덤수. n은 1.158*10^77 로 2^256 보다 작은 수&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;21-공개키-주소-출력&quot;&gt;2.1 공개키 주소 출력&lt;/h3&gt;
&lt;p&gt;bitcoin core가 출력하는 개인키는 WIF(Wallet Import Format)라 불리는 checksum을 사용하는 Base64로 인코딩&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bitcoind -regtest -daemon # 비트코인 로컬 테스트 모드 가동

$ bitcoin-cli -testnet createwallet testuser1 # tesetuser1 이라는 로컬 지갑 생성

$ bitcoin-cli -regtest getnewaddress testuser1 # 공개키 주소 출력
bcrt1qwqun64v25383jx27y2nnwrfys9wmdegrkth0s9

$ bitcoin-cli -regtest dumpprivkey bcrt1qwqun64v25383jx27y2nnwrfys9wmdegrkth0s9 # 개인키 주소 출력
cUHyunoR5DXoASGDZ8ruvVbELyqEKAErbS8Y8coZeFwiCRb3pCqw

$ ./bx seed | ./bx ec-new | ./bx ec-to-wif
KzkpWYY7QZmV2v4U3LMHj3d1DBj3DTAchzy9jVpBfV5oh2bTY2KL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-공개키public-key&quot;&gt;3. 공개키(Public Key)&lt;/h2&gt;
&lt;p&gt;타원 곡선 곱셈을 사용하여 개인키에서 계산된다. 겉할기 수준으로 이해를 하고 넘어가자…&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;bitcon core에서는 specp256k1 최적화 C라이브러리를 사용 정의&lt;/li&gt;
  &lt;li&gt;타원 곡선 함수는 비대칭 함수, 단방향으로는 계산이 쉽지만, 반대 방향으로의 계산은 매우 어려움&lt;/li&gt;
  &lt;li&gt;K(공개키) = k(주의:개인키 아님) * G
    &lt;ul&gt;
      &lt;li&gt;G는 타원곡선 상의 한점(x, y)으로 정의&lt;/li&gt;
      &lt;li&gt;타원 곡선 함수의 연산은 덧셈의 반복
        &lt;ul&gt;
          &lt;li&gt;kG = G + G + G + … + G (k times)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;타원 곡선 그래프는 G를 포함한 접선을 그어 G가 아닌 타원 곡선 그래프 상에 임의의 접점을 구하여 x축 대칭을 시키는 과정을 반복&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch4_2.png&quot; alt=&quot;그림2&quot; /&gt;
그림2 타원 곡선 함수 계산 과정&lt;/p&gt;

&lt;h2 id=&quot;4-비트코인-주소bitcoin-address&quot;&gt;4. 비트코인 주소(Bitcoin Address)&lt;/h2&gt;
&lt;p&gt;단방향 암호화 해싱을 통해 공개키에서 파생된다.
SHA256 함수와 RIPEMD160 함수를 사용. 두 해시함수를 연속적으로 적용하는 함수 HASH160
생성된 공개키 해시 값을 Base58Check으로 인코딩 함수를 사용해서 주소를 생성. 이를 비트코인 주소라 한&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch4_3.png&quot; alt=&quot;그림3&quot; /&gt;&lt;br /&gt;
그림3 공개키에서 비트코인 주소 생성 절차&lt;/p&gt;

&lt;h2 id=&quot;5-key-formats&quot;&gt;5. Key Formats&lt;/h2&gt;
&lt;p&gt;사용자가 오류 없이 키를 쉽게 일고 쓸 수 있도록 하기 위해 사용&lt;/p&gt;
&lt;h3 id=&quot;51-개인키-formats&quot;&gt;5.1 개인키 formats&lt;/h3&gt;
&lt;p&gt;개인키는 256비트 -&amp;gt; 32바이트 -&amp;gt; 16진수 표현 64자리 &lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/hanscom95/hanscom95.github.io/master/static/img/_posts/bitcoinbook_ch4_4.png&quot; alt=&quot;그림4&quot; /&gt;&lt;br /&gt;
그림4 개인키 포맷&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./bx wif-to-ec KzkpWYY7QZmV2v4U3LMHj3d1DBj3DTAchzy9jVpBfV5oh2bTY2KL
69841009fdbb8dac05e7dbe2d093fe1d8d36e050ac84db0c5a0641c36e45615f

$ ./bx base58check-decode KzkpWYY7QZmV2v4U3LMHj3d1DBj3DTAchzy9jVpBfV5oh2bTY2KL
wrapper
{
    checksum 1133447052
    payload 69841009fdbb8dac05e7dbe2d093fe1d8d36e050ac84db0c5a0641c36e45615f01
    version 128
}

$ ./bx base58check-encode 69841009fdbb8dac05e7dbe2d093fe1d8d36e050ac84db0c5a0641c36e45615f01 --version 128
KzkpWYY7QZmV2v4U3LMHj3d1DBj3DTAchzy9jVpBfV5oh2bTY2KL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;52-공개키-formats&quot;&gt;5.2 공개키 formats&lt;/h3&gt;

&lt;p&gt;아래 예제는 python으로 작성된 key format code이다.(Running key-to-address-ecc-example.py)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python3 key-to-address-ecc-example.py
Private Key (hex) is:  6aab09ee2dfc3eb7e75638ca5ff4bf43e2728940feeb8fba5c3d8f916678cf70
Private Key (decimal) is:  48247361334930589481594495841992059859843736875128270815753879940829604794224
Private Key (WIF) is:  5JdGGvxhv3ifJSEvZTPdXKUnH9rzBzMTmiG4c64CRETKvmsha1z
Private Key Compressed (hex) is:  6aab09ee2dfc3eb7e75638ca5ff4bf43e2728940feeb8fba5c3d8f916678cf7001
Private Key (WIF-Compressed) is:  Kzo4RKAsb8zt3xQTQFUtCpZcrJ7dRW9KAM7UusK7PxPCXtZ9rDNK
Public Key (x,y) coordinates is: (95688209842730219301716110657101962663481178475860448940458861642428423340491, 38591482754941261609609094707882578042805919665486369567852338041417468276141)
Public Key (hex) is: 04d38d9b84f81fd70c54a868ef3163dc895cba53d53766513ae6c010ce01fc01cb55520153fcdda15b8586752f589f161c1157e1d19fe57a3997a3f8e5bdc0edad
Compressed Public Key (hex) is: 03d38d9b84f81fd70c54a868ef3163dc895cba53d53766513ae6c010ce01fc01cb
Bitcoin Address (b58check) is: 1EDAkoYYX2bkHJGbeFnQa962KoEoTYRWVy
Compressed Bitcoin Address (b58check) is: 1A5Ec43i2hSKb4Z1M9vMNWBQoefh8wsFLy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래 코드 진행시 버전 차이로 인해 error 발생 코드 수정&lt;br /&gt;
(참조 &lt;a href=&quot;https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/issue/2022/02/24/bitcoinbook_ch4_addr_code_issue.html&quot;&gt;ch4 addr error&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ g++ -o addr ./addr.cpp -std=c++11 $(pkg-config --cflags --libs --static libbitcoin-system)
$ ./addr
Public key: 0202a406624211f2abbdc68da3df929f938c3399dd79fac1b51b0e4ad1d26a47aa
Address: 1PRTTaJesdNovgne6Ehcdu1fpEdX7913CK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-참고문서&quot;&gt;○ 참고문서&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitcoinbook/bitcoinbook/blob/develop/ch04.asciidoc&quot;&gt;bitcoinbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 24 Feb 2022 12:00:00 +0900</pubDate>
        <link>https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/02/24/bitcoinbook_ch4.html</link>
        <guid isPermaLink="true">https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/02/24/bitcoinbook_ch4.html</guid>
        
        
        <category>all</category>
        
        <category>bitcoin</category>
        
        <category>마스터링 비트코인</category>
        
      </item>
    
      <item>
        <title>마스터링 비트코인 ch3</title>
        <description>&lt;h1 id=&quot;마스터링-비트코인-ch3-비트코인-코어참조구현개발환경-세팅&quot;&gt;마스터링 비트코인 ch3 비트코인 코어:참조구현(개발환경 세팅)&lt;/h1&gt;
&lt;p&gt;비트코인 코어 3장 개발환경 세팅&lt;br /&gt;
풀 인덱스 노드 설정&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;개발환경&lt;/strong&gt;&lt;br /&gt;
docker 20.10.8 / Ubuntu 20.04 / BitcoinCore v22.0 / HDD 4tb / RAM 32GB&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt-get update
$ apt-get upgrade
$ apt-get install git
$ git clone https://github.com/bitcoin/bitcoin.git
$ git checkout v22.0
$ git status
$ apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils python3
$ apt-get install libevent-dev libboost-dev
$ apt-get install libdb4.8-dev libdb4.8++-dev
$ apt-get install libqrencode-dev autoconf openssl libssl-dev libevent-dev
$ apt install libsqlite3-dev
$ apt install libminiupnpc-dev libnatpmp-dev
$ apt install systemtap-sdt-dev

$ ./autogen.sh
$ ./configure BDB_LIBS=&quot;/home/ubuntu/bitcoin/db4/lib -ldb_cxx-4.8&quot; BDB_CFLAGS=&quot;/home/ubuntu/bitcoin/db4/include&quot; --without-gui -prefix=/home/ubuntu/bitcoin/
$ ./contrib/install_db4.sh `pwd`
$ make
$ make install

$ bitcoind -datadir=/home/ubuntu/bitcoin/data -daemon
$ bitcoind -printconsole
$ chmod 766 -R ./data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;설치가 성공적으로 끝나면 API테스트&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bitcoin-cli getblockchaininfo
{
    &quot;version&quot;: 150000, 
    &quot;subversion&quot;: &quot;/Satoshi:0.15.0/&quot;, 
    &quot;protocolversion&quot;: 70015, 
    &quot;localservices&quot;: &quot;000000000000000d&quot;, 
    &quot;localrelay&quot;: true, 
    &quot;timeoffset&quot;: 0, 
    &quot;networkactive&quot;: true, 
    &quot;connections&quot;: 8, 
    &quot;networks&quot;: [ 
    ... 
    detailed information about all networks (ipv4, ipv6 or onion) 
    ... 
    ], 
    &quot;relayfee&quot;: 0.00001000, 
    &quot;incrementalfee&quot;: 0.00001000, 
    &quot;localaddresses&quot;: [ 
    ], 
    &quot;warnings&quot;: &quot;”
}

$ bitcoin-cli getblockhash 1000
00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09

$ bitcoin-cli getrawtransaction 7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18
0100000001524d288f25cada331c298e21995ad070e1d1a0793e818f2f7cfb5f6122ef3e71000000008c493046022100a59e516883459706ac2e6ed6a97ef9788942d3c96a0108f2699fa48d9a5725d1022100f9bb4434943e87901c0c96b5f3af4e7ba7b83e12c69b1edbfe6965f933fcd17d014104e5a0b4de6c09bd9d3f730ce56ff42657da3a7ec4798c0ace2459fb007236bc3249f70170509ed663da0300023a5de700998bfec49d4da4c66288a58374626c8dffffffff0180969800000000001976a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac00000000

$ bitcoin-cli decoderawtransaction 0100000001524d288f25cada331c298e21995ad070e1d1a0793e818f2f7cfb5f6122ef3e71000000008c493046022100a59e516883459706ac2e6ed6a97ef9788942d3c96a0108f2699fa48d9a5725d1022100f9bb4434943e87901c0c96b5f3af4e7ba7b83e12c69b1edbfe6965f933fcd17d014104e5a0b4de6c09bd9d3f730ce56ff42657da3a7ec4798c0ace2459fb007236bc3249f70170509ed663da0300023a5de700998bfec49d4da4c66288a58374626c8dffffffff0180969800000000001976a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac00000000
{
  &quot;txid&quot;: &quot;7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18&quot;,
  &quot;hash&quot;: &quot;7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18&quot;,
  &quot;version&quot;: 1,
  &quot;size&quot;: 225,
  &quot;vsize&quot;: 225,
  &quot;weight&quot;: 900,
  &quot;locktime&quot;: 0,
  &quot;vin&quot;: [
    ... 
  ],
  &quot;vout&quot;: [
    {
      &quot;value&quot;: 0.10000000,
      &quot;n&quot;: 0,
      &quot;scriptPubKey&quot;: {
        &quot;asm&quot;: &quot;OP_DUP OP_HASH160 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG&quot;,
        &quot;hex&quot;: &quot;76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac&quot;,
        &quot;address&quot;: &quot;1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK&quot;,
        &quot;type&quot;: &quot;pubkeyhash&quot;
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 23 Feb 2022 15:00:00 +0900</pubDate>
        <link>https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/02/23/bitcoinbook_ch3.html</link>
        <guid isPermaLink="true">https://hanscom95.github.io/all/bitcoin/%EB%A7%88%EC%8A%A4%ED%84%B0%EB%A7%81%20%EB%B9%84%ED%8A%B8%EC%BD%94%EC%9D%B8/2022/02/23/bitcoinbook_ch3.html</guid>
        
        
        <category>all</category>
        
        <category>bitcoin</category>
        
        <category>마스터링 비트코인</category>
        
      </item>
    
      <item>
        <title>wellcome to taehoon blog</title>
        <description>&lt;h1 id=&quot;개발공부를-위해-오픈한-블로그&quot;&gt;개발공부를 위해 오픈한 블로그&lt;/h1&gt;
&lt;p&gt;개발에 관한 내용 올리기 위해 블로그를 열었다.&lt;br /&gt;
회사에서 하는 업무나 하고 싶은 개발 스터디가 있음 포스팅 해야지…&lt;br /&gt;
아 1일 1커밋도 이거 떄문에 할 수 있으려나…&lt;br /&gt;
여행 가고 싶다아…&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Feb 2022 15:05:00 +0900</pubDate>
        <link>https://hanscom95.github.io/all/2022/02/21/welcome-to-taehoon_blog.html</link>
        <guid isPermaLink="true">https://hanscom95.github.io/all/2022/02/21/welcome-to-taehoon_blog.html</guid>
        
        
        <category>all</category>
        
      </item>
    
  </channel>
</rss>
